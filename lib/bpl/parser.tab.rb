#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex'
require_relative 'ast/type'
require_relative 'ast/expression'
require_relative 'ast/specification'
require_relative 'ast/statement'
require_relative 'ast/declaration'
require_relative 'ast/program'
include Bpl::AST

class BoogieLanguage < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 349)
def parse(input)
  scan_str(input)
end

def parse_special(str, kind)
  scan_setup("$$PARSE_#{kind.upcase}$$ " + str)
  do_parse
end

def parse_decl(str) parse_special(str, :decl) end
def parse_param(str) parse_special(str, :param) end
def parse_spec(str) parse_special(str, :spec) end
def parse_blocks(str) parse_special(str, :blocks) end
def parse_block(str) parse_special(str, :blocks).first end
def parse_stmt(str) parse_special(str, :stmt) end
def parse_expr(str) parse_special(str, :expr) end
def parse_type(str) parse_special(str, :type) end

def parse_str(str)
  case str
  when /\b(requires|ensures|modifies|invariant)\b/
    parse_spec(str)
  when /\b(type|const|function|axiom|var|procedure|implementation)\b/
    parse_decl(str)
  when /\A\s*#{Bpl::IDENTIFIER}:.*;.*\s+#{Bpl::IDENTIFIER}:/m
    parse_blocks(str)
  when /\A\s*#{Bpl::IDENTIFIER}:.*;/m
    parse_block(str)
  when /\b(assert|assume|havoc|call|if|while|break|goto|return)\b|:=/
    parse_stmt(str)
  when /[^<:]:[^:]/
    parse_param(str)
  else
    parse_expr(str)
  end
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    69,   105,   255,    63,  -148,    49,   -37,    80,    64,   333,
   187,   381,  -191,   380,   360,    56,    82,    80,   322,    91,
    78,    65,    29,    35,   332,    70,    77,    56,    60,    59,
    78,   247,    29,   365,  -124,    35,    77,    75,    76,    92,
    61,    62,   160,   248,   256,    66,   249,    75,    76,   136,
    82,   110,   133,   134,   135,   131,   132,   130,   123,   124,
   125,   126,   127,   128,   129,   122,   121,   120,   119,   136,
  -124,    35,   133,   134,   135,   131,   132,   130,   123,   124,
   125,   126,   127,   128,   129,   122,   121,   120,   119,   136,
   250,   136,   133,   134,   135,   131,   132,   136,   251,   244,
   133,   134,   135,   131,   132,   130,   123,   124,   125,   126,
   127,   128,   129,   122,   121,   120,   119,   136,   252,   353,
   133,   134,   135,   131,   132,   130,   123,   124,   125,   126,
   127,   128,   129,   122,   121,   120,   119,   136,   253,    82,
   133,   134,   135,    56,    82,   136,   322,   243,   133,   134,
   135,   131,   132,   130,   123,   124,   125,   126,   127,   128,
   129,   122,   121,   120,   119,   136,   103,   186,   133,   134,
   135,   131,   132,   130,   123,   124,   125,   126,   127,   128,
   129,   122,   121,   120,   119,   136,   106,   241,   133,   134,
   135,    93,   213,   136,    80,   242,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,    80,  -103,   236,    35,   146,   147,    69,
    49,    35,    63,    96,    97,    98,    38,    64,   174,  -124,
  -124,  -124,   237,    95,  -124,  -124,  -124,    80,    29,    29,
    65,   136,   136,   240,    70,   136,    56,    60,    59,    39,
   254,    40,    41,    43,    45,    46,    47,    48,    56,    61,
    62,    82,   136,    56,    66,   133,   134,   135,   131,   132,
   130,   123,   124,   125,   126,   127,   128,   129,   122,   121,
   120,   119,    22,    69,    80,   136,    63,   260,   133,   134,
   135,    64,    69,   112,    29,    63,   184,    78,   264,    29,
    64,   265,   114,    77,    65,   266,   267,    29,    70,   383,
    56,    60,    59,    65,    75,    76,   272,    70,   273,    56,
    60,    59,    69,    61,    62,    63,   274,   275,    66,    82,
    64,    69,    61,    62,    63,    82,    56,    66,    82,    64,
    80,   285,   286,    65,    82,   116,   289,    70,   290,    56,
    60,    59,    65,   291,   117,   141,    70,    82,    56,    60,
    59,    69,    61,    62,    63,   296,    29,    66,   298,    64,
    69,    61,    62,    63,   300,   142,    66,   143,    64,    29,
    29,   311,    65,   312,   313,   314,    70,   315,    56,    60,
    59,    65,   226,   153,   -37,    70,   318,    56,    60,    59,
   227,    61,    62,    56,    69,    80,    66,    63,   114,    22,
    61,    62,    64,    69,    29,    66,    63,   184,    78,   327,
    29,    64,    29,    56,    77,    65,   330,   331,    29,    70,
   334,    56,    60,    59,    65,    75,    76,   335,    70,   336,
    56,    60,    59,    69,    61,    62,    63,   337,    82,    66,
    82,    64,    69,    61,    62,    63,   185,   158,    66,    56,
    64,    35,    29,   223,    65,   160,   346,    56,    70,   160,
    56,    60,    59,    65,   350,   350,   -37,    70,   352,    56,
    60,    59,    69,    61,    62,    63,   175,    80,    66,   355,
    64,   174,    61,    62,   357,   358,    82,    66,   363,   141,
    78,   -31,    29,    65,    29,    69,    77,    70,    63,    56,
    60,    59,   227,    64,    92,    29,    29,    75,    76,   141,
    56,    29,    61,    62,    29,    29,    65,    66,    69,    49,
    70,    63,    56,    60,    59,    38,    64,   376,   377,   378,
    -9,    26,   341,   nil,   nil,    61,    62,   nil,   nil,    65,
    66,    69,   nil,    70,    63,    56,    60,    59,    39,    64,
    40,    41,    43,    45,    46,    47,    48,   nil,    61,    62,
   nil,   nil,    65,    66,    69,    49,    70,    63,    56,   210,
    59,    38,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    61,    62,   nil,   nil,    65,    66,    69,   nil,    70,
    63,    56,    60,    59,    39,    64,    40,    41,    43,    45,
    46,    47,    48,   nil,    61,    62,   nil,   nil,    65,    66,
    69,    49,    70,    63,    56,    60,    59,    38,    64,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,    62,   nil,
   nil,    65,    66,    69,   nil,    70,    63,    56,    60,    59,
    39,    64,    40,    41,    43,    45,    46,    47,    48,   nil,
    61,    62,   nil,   nil,    65,    66,    69,    49,    70,    63,
    56,    60,    59,    38,    64,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    61,    62,   nil,   nil,    65,    66,    69,
   nil,    70,    63,    56,    60,    59,    39,    64,    40,    41,
    43,    45,    46,    47,    48,   nil,    61,    62,   nil,   nil,
    65,    66,    69,    49,    70,    63,    56,    60,    59,    38,
    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,
    62,   nil,   nil,    65,    66,    69,   nil,    70,    63,    56,
    60,    59,    39,    64,    40,    41,    43,    45,    46,    47,
    48,   nil,    61,    62,   nil,   nil,    65,    66,    69,    49,
    70,    63,    56,    60,    59,    56,    64,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    61,    62,   nil,   nil,    65,
    66,    69,   nil,    70,    63,    56,    60,    59,    39,    64,
    40,    41,    43,    45,    46,    47,    48,   nil,    61,    62,
   nil,   nil,    65,    66,    69,    49,    70,    63,    56,    60,
    59,    38,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    61,    62,   nil,   nil,    65,    66,    69,   nil,    70,
    63,    56,    60,    59,    39,    64,    40,    41,    43,    45,
    46,    47,    48,   nil,    61,    62,   nil,   nil,    65,    66,
    69,   nil,    70,    63,    56,    60,    59,   136,    64,   nil,
   133,   134,   135,   131,   132,   130,   nil,    61,    62,   nil,
   nil,    65,    66,    69,   nil,    70,    63,    56,    60,    59,
   136,    64,   nil,   133,   134,   135,   131,   132,   130,   nil,
    61,    62,   nil,   nil,    65,    66,    69,   nil,    70,    63,
    56,    60,    59,   136,    64,   nil,   133,   134,   135,   131,
   132,   130,   nil,    61,    62,   nil,   nil,    65,    66,    69,
   nil,    70,    63,    56,    60,    59,   136,    64,   nil,   133,
   134,   135,   131,   132,   130,   nil,    61,    62,   nil,   nil,
    65,    66,    69,   nil,    70,    63,    56,    60,    59,   136,
    64,   nil,   133,   134,   135,   131,   132,   130,   nil,    61,
    62,   nil,   nil,    65,    66,    69,   nil,    70,    63,    56,
    60,    59,   136,    64,   nil,   133,   134,   135,   131,   132,
   130,   nil,    61,    62,   nil,   nil,    65,    66,    69,   nil,
    70,    63,    56,    60,    59,   136,    64,   nil,   133,   134,
   135,   131,   132,   130,   nil,    61,    62,   nil,   nil,    65,
    66,    69,   nil,    70,    63,    56,    60,    59,   nil,    64,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    61,    62,
   nil,   nil,    65,    66,    69,   nil,    70,    63,    56,    60,
    59,   nil,    64,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    61,    62,   nil,   nil,    65,    66,    69,   nil,    70,
    63,    56,    60,    59,   nil,    64,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    61,    62,   nil,   nil,    65,    66,
    69,   nil,    70,    63,    56,    60,    59,   nil,    64,   nil,
   nil,   nil,   nil,   -37,   nil,   nil,   nil,    61,    62,   nil,
   nil,    65,    66,    69,    80,    70,    63,    56,    60,    59,
   nil,    64,   nil,   nil,   nil,   nil,   nil,    78,   nil,    29,
    61,    62,   nil,    77,    65,    66,   nil,   nil,    70,   nil,
    56,    60,    59,    69,    75,    76,    63,   184,   nil,   nil,
   nil,    64,    69,    61,    62,    63,   nil,   nil,    66,   nil,
    64,   nil,   nil,   nil,    65,   nil,   nil,   nil,    70,   nil,
    56,    60,    59,    65,   nil,   nil,   nil,    70,   nil,    56,
    60,    59,    69,    61,    62,    63,   184,   nil,    66,   nil,
    64,    69,    61,    62,    63,   nil,   nil,    66,   nil,    64,
   nil,   nil,   nil,    65,   nil,   nil,   nil,    70,   nil,    56,
    60,    59,    65,   nil,   nil,   nil,    70,   nil,    56,    60,
    59,    69,    61,    62,    63,   nil,   nil,    66,   nil,    64,
    69,    61,    62,    63,   nil,   nil,    66,   nil,    64,   nil,
   nil,   nil,    65,   nil,   nil,   nil,    70,   nil,    56,    60,
    59,    65,   nil,   nil,   nil,    70,   nil,    56,    60,    59,
    69,    61,    62,    63,   nil,   nil,    66,   nil,    64,    69,
    61,    62,    63,   nil,   nil,    66,   nil,    64,   nil,   nil,
   nil,    65,   nil,   nil,   nil,    70,   nil,    56,    60,    59,
    65,   nil,   nil,   nil,    70,   nil,    56,    60,    59,    69,
    61,    62,    63,   nil,   nil,    66,    80,    64,   nil,    61,
    62,   nil,   nil,   nil,    66,   nil,   nil,   nil,   nil,    78,
    65,    29,   nil,   nil,    70,    77,    56,    60,    59,     3,
     4,     5,     6,     7,     8,     9,    75,    76,   nil,    61,
    62,   nil,   136,   nil,    66,   133,   134,   135,   131,   132,
   130,   123,   124,   125,   126,   127,   128,   129,    18,   nil,
   nil,    19,   nil,   nil,    20,   nil,    21,    22,   nil,    23,
   nil,   136,   nil,    24,   133,   134,   135,   131,   132,   130,
   123,   124,   125,   126,   127,   128,   129,   122,   121,   120,
   119,    80,   nil,   nil,   nil,   nil,   nil,   nil,    80,   nil,
   nil,    80,   nil,   nil,    78,   nil,    29,   nil,   nil,   246,
    77,    78,   nil,    29,    78,   nil,    29,    77,   nil,   nil,
    77,    75,    76,    80,   nil,   nil,    80,   nil,    75,    76,
   nil,    75,    76,    80,   nil,   nil,    78,   nil,    29,    78,
   nil,    29,    77,   nil,   nil,    77,    78,    80,    29,   nil,
   nil,   nil,    77,    75,    76,    80,    75,    76,   nil,   nil,
    78,  -166,    29,    75,    76,   nil,    77,   nil,    78,   nil,
    29,   nil,   nil,   nil,    77,   nil,   nil,    75,    76,   nil,
   nil,   nil,   nil,   nil,   136,    75,    76,   133,   134,   135,
   131,   132,   130,   123,   124,   125,   126,   127,   128,   129,
   122,   121,   120,   119,   nil,   nil,   nil,   136,   nil,   219,
   133,   134,   135,   131,   132,   130,   123,   124,   125,   126,
   127,   128,   129,   122,   121,   120,   119,   nil,   nil,   nil,
   136,   nil,   261,   133,   134,   135,   131,   132,   130,   123,
   124,   125,   126,   127,   128,   129,   122,   121,   120,   119,
   nil,   nil,   nil,   136,   nil,   356,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,   136,   nil,   288,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,   136,   212,   nil,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,   136,   nil,   nil,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,   136,   nil,   nil,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,   136,   319,   nil,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,   136,   nil,   nil,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,   136,   nil,   nil,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   119,   136,   nil,   nil,   133,   134,   135,   131,
   132,   130,   123,   124,   125,   126,   127,   128,   129,   122,
   121,   120,   136,   nil,   nil,   133,   134,   135,   131,   132,
   130,   123,   124,   125,   126,   127,   128,   129,   122,   121,
   136,   nil,   nil,   133,   134,   135,   131,   132,   130,   123,
   124,   125,   126,   127,   128,   129,   122,    18,   nil,   nil,
    19,   nil,   nil,    20,   nil,    21,    22,    18,    23,   nil,
    19,   nil,    24,    20,   nil,    21,    22,   nil,    23,   nil,
   nil,   nil,    24 ]

racc_action_check = [
    47,    43,   211,    47,   272,   355,   149,   358,    47,   306,
   111,   376,   349,   376,   349,   174,   290,   149,   290,    26,
   358,    47,   358,   349,   306,    47,   358,    47,    47,    47,
   149,   177,   149,   355,   284,   284,   149,   358,   358,    30,
    47,    47,   272,   179,   211,    47,   180,   149,   149,   173,
    43,    47,   173,   173,   173,   173,   173,   173,   173,   173,
   173,   173,   173,   173,   173,   173,   173,   173,   173,   340,
   251,   251,   340,   340,   340,   340,   340,   340,   340,   340,
   340,   340,   340,   340,   340,   340,   340,   340,   340,   204,
   181,   137,   204,   204,   204,   204,   204,   172,   183,   173,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   109,   188,   340,
   109,   109,   109,   109,   109,   109,   109,   109,   109,   109,
   109,   109,   109,   109,   109,   109,   109,   206,   189,    40,
   206,   206,   206,    41,   325,   171,   325,   172,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   162,    42,   109,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   205,    45,   170,   205,   205,
   205,    31,   140,   169,   165,   171,   169,   169,   169,   169,
   169,   169,   169,   169,   169,   169,   169,   169,   169,   169,
   169,   169,   169,   164,   178,   162,   362,    70,    70,    70,
   285,   360,    70,    36,    36,    36,   285,    70,   178,   362,
   362,   362,   163,    32,   360,   360,   360,   161,   159,   157,
    70,   207,   208,   169,    70,   209,    70,    70,    70,   285,
   210,   285,   285,   285,   285,   285,   285,   285,    46,    70,
    70,    23,   382,    48,    70,   382,   382,   382,   382,   382,
   382,   382,   382,   382,   382,   382,   382,   382,   382,   382,
   382,   382,   215,   132,    93,   138,   132,   216,   138,   138,
   138,   132,   250,    49,   220,   250,   250,    93,   224,    93,
   250,   225,    50,    93,   132,   229,   231,   233,   132,   382,
   132,   132,   132,   250,    93,    93,   234,   250,   235,   250,
   250,   250,   248,   132,   132,   248,   238,   239,   132,    22,
   248,   246,   250,   250,   246,    21,   249,   250,    20,   246,
   145,   252,   254,   248,    19,    51,   258,   248,   262,   248,
   248,   248,   246,   263,    53,    66,   246,    18,   246,   246,
   246,   212,   248,   248,   212,   268,   269,   248,   270,   212,
   267,   246,   246,   267,   271,    68,   246,    69,   267,   274,
   275,   277,   212,   279,   280,   282,   212,   283,   212,   212,
   212,   267,   154,    79,   150,   267,   286,   267,   267,   267,
   267,   212,   212,   116,   288,   150,   212,   288,   115,   141,
   267,   267,   288,   313,   291,   267,   313,   313,   150,   295,
   150,   313,    80,   302,   150,   288,   303,   305,    82,   288,
   308,   288,   288,   288,   313,   150,   150,   310,   313,   311,
   313,   313,   313,     8,   288,   288,     8,   312,    24,   288,
    83,     8,   315,   313,   313,   315,   108,    84,   313,   105,
   315,     5,     4,   152,     8,   330,   331,   104,     8,    85,
     8,     8,     8,   315,   334,   335,   367,   315,   339,   315,
   315,   315,   155,     8,     8,   155,   102,   367,     8,   341,
   155,   101,   315,   315,   343,   346,    39,   315,   350,   351,
   367,   367,   367,   155,    86,   143,   367,   155,   143,   155,
   155,   155,   155,   143,   367,    88,    89,   367,   367,   361,
    97,   363,   155,   155,    90,    92,   143,   155,   142,   214,
   143,   142,   143,   143,   143,   214,   142,   368,   374,   375,
    38,     1,   317,   nil,   nil,   143,   143,   nil,   nil,   142,
   143,   136,   nil,   142,   136,   142,   142,   142,   214,   136,
   214,   214,   214,   214,   214,   214,   214,   nil,   142,   142,
   nil,   nil,   136,   142,   135,    54,   136,   135,   136,   136,
   136,    54,   135,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   136,   136,   nil,   nil,   135,   136,   134,   nil,   135,
   134,   135,   135,   135,    54,   134,    54,    54,    54,    54,
    54,    54,    54,   nil,   135,   135,   nil,   nil,   134,   135,
    95,   365,   134,    95,   134,   134,   134,   365,    95,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   134,   134,   nil,
   nil,    95,   134,   133,   nil,    95,   133,    95,    95,    95,
   365,   133,   365,   365,   365,   365,   365,   365,   365,   nil,
    95,    95,   nil,   nil,   133,    95,   256,   117,   133,   256,
   133,   133,   133,   117,   256,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   133,   133,   nil,   nil,   256,   133,   321,
   nil,   256,   321,   256,   256,   256,   117,   321,   117,   117,
   117,   117,   117,   117,   117,   nil,   256,   256,   nil,   nil,
   321,   256,   131,     6,   321,   131,   321,   321,   321,     6,
   131,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   321,
   321,   nil,   nil,   131,   321,   130,   nil,   131,   130,   131,
   131,   131,     6,   130,     6,     6,     6,     6,     6,     6,
     6,   nil,   131,   131,   nil,   nil,   130,   131,   129,     7,
   130,   129,   130,   130,   130,     7,   129,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   130,   130,   nil,   nil,   129,
   130,   128,   nil,   129,   128,   129,   129,   129,     7,   128,
     7,     7,     7,     7,     7,     7,     7,   nil,   129,   129,
   nil,   nil,   128,   129,   127,   314,   128,   127,   128,   128,
   128,   314,   127,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   128,   128,   nil,   nil,   127,   128,   126,   nil,   127,
   126,   127,   127,   127,   314,   126,   314,   314,   314,   314,
   314,   314,   314,   nil,   127,   127,   nil,   nil,   126,   127,
   125,   nil,   126,   125,   126,   126,   126,   198,   125,   nil,
   198,   198,   198,   198,   198,   198,   nil,   126,   126,   nil,
   nil,   125,   126,    63,   nil,   125,    63,   125,   125,   125,
   197,    63,   nil,   197,   197,   197,   197,   197,   197,   nil,
   125,   125,   nil,   nil,    63,   125,    64,   nil,    63,    64,
    63,    63,    63,   202,    64,   nil,   202,   202,   202,   202,
   202,   202,   nil,    63,    63,   nil,   nil,    64,    63,    65,
   nil,    64,    65,    64,    64,    64,   199,    65,   nil,   199,
   199,   199,   199,   199,   199,   nil,    64,    64,   nil,   nil,
    65,    64,   124,   nil,    65,   124,    65,    65,    65,   201,
   124,   nil,   201,   201,   201,   201,   201,   201,   nil,    65,
    65,   nil,   nil,   124,    65,   123,   nil,   124,   123,   124,
   124,   124,   203,   123,   nil,   203,   203,   203,   203,   203,
   203,   nil,   124,   124,   nil,   nil,   123,   124,   122,   nil,
   123,   122,   123,   123,   123,   200,   122,   nil,   200,   200,
   200,   200,   200,   200,   nil,   123,   123,   nil,   nil,   122,
   123,   322,   nil,   122,   322,   122,   122,   122,   nil,   322,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   122,   122,
   nil,   nil,   322,   122,   121,   nil,   322,   121,   322,   322,
   322,   nil,   121,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   322,   322,   nil,   nil,   121,   322,   120,   nil,   121,
   120,   121,   121,   121,   nil,   120,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   121,   121,   nil,   nil,   120,   121,
   119,   nil,   120,   119,   120,   120,   120,   nil,   119,   nil,
   nil,   nil,   nil,    74,   nil,   nil,   nil,   120,   120,   nil,
   nil,   119,   120,   114,    74,   119,   114,   119,   119,   119,
   nil,   114,   nil,   nil,   nil,   nil,   nil,    74,   nil,    74,
   119,   119,   nil,    74,   114,   119,   nil,   nil,   114,   nil,
   114,   114,   114,   112,    74,    74,   112,   112,   nil,   nil,
   nil,   112,   381,   114,   114,   381,   nil,   nil,   114,   nil,
   381,   nil,   nil,   nil,   112,   nil,   nil,   nil,   112,   nil,
   112,   112,   112,   381,   nil,   nil,   nil,   381,   nil,   381,
   381,   381,   106,   112,   112,   106,   106,   nil,   112,   nil,
   106,   103,   381,   381,   103,   nil,   nil,   381,   nil,   103,
   nil,   nil,   nil,   106,   nil,   nil,   nil,   106,   nil,   106,
   106,   106,   103,   nil,   nil,   nil,   103,   nil,   103,   103,
   103,   100,   106,   106,   100,   nil,   nil,   106,   nil,   100,
    87,   103,   103,    87,   nil,   nil,   103,   nil,    87,   nil,
   nil,   nil,   100,   nil,   nil,   nil,   100,   nil,   100,   100,
   100,    87,   nil,   nil,   nil,    87,   nil,    87,    87,    87,
    99,   100,   100,    99,   nil,   nil,   100,   nil,    99,    98,
    87,    87,    98,   nil,   nil,    87,   nil,    98,   nil,   nil,
   nil,    99,   nil,   nil,   nil,    99,   nil,    99,    99,    99,
    98,   nil,   nil,   nil,    98,   nil,    98,    98,    98,    96,
    99,    99,    96,   nil,   nil,    99,   296,    96,   nil,    98,
    98,   nil,   nil,   nil,    98,   nil,   nil,   nil,   nil,   296,
    96,   296,   nil,   nil,    96,   296,    96,    96,    96,     0,
     0,     0,     0,     0,     0,     0,   296,   296,   nil,    96,
    96,   nil,   196,   nil,    96,   196,   196,   196,   196,   196,
   196,   196,   196,   196,   196,   196,   196,   196,     0,   nil,
   nil,     0,   nil,   nil,     0,   nil,     0,     0,   nil,     0,
   nil,   176,   nil,     0,   176,   176,   176,   176,   176,   176,
   176,   176,   176,   176,   176,   176,   176,   176,   176,   176,
   176,   153,   nil,   nil,   nil,   nil,   nil,   nil,   264,   nil,
   nil,   333,   nil,   nil,   153,   nil,   153,   nil,   nil,   176,
   153,   264,   nil,   264,   333,   nil,   333,   264,   nil,   nil,
   333,   153,   153,   332,   nil,   nil,    78,   nil,   264,   264,
   nil,   333,   333,     9,   nil,   nil,   332,   nil,   332,    78,
   nil,    78,   332,   nil,   nil,    78,     9,   273,     9,   nil,
   nil,   nil,     9,   332,   332,   265,    78,    78,   nil,   nil,
   273,   273,   273,     9,     9,   nil,   273,   nil,   265,   nil,
   265,   nil,   nil,   nil,   265,   nil,   nil,   273,   273,   nil,
   nil,   nil,   nil,   nil,   144,   265,   265,   144,   144,   144,
   144,   144,   144,   144,   144,   144,   144,   144,   144,   144,
   144,   144,   144,   144,   nil,   nil,   nil,   218,   nil,   144,
   218,   218,   218,   218,   218,   218,   218,   218,   218,   218,
   218,   218,   218,   218,   218,   218,   218,   nil,   nil,   nil,
   342,   nil,   218,   342,   342,   342,   342,   342,   342,   342,
   342,   342,   342,   342,   342,   342,   342,   342,   342,   342,
   nil,   nil,   nil,   257,   nil,   342,   257,   257,   257,   257,
   257,   257,   257,   257,   257,   257,   257,   257,   257,   257,
   257,   257,   257,   139,   nil,   257,   139,   139,   139,   139,
   139,   139,   139,   139,   139,   139,   139,   139,   139,   139,
   139,   139,   139,    57,   139,   nil,    57,    57,    57,    57,
    57,    57,    57,    57,    57,    57,    57,    57,    57,    57,
    57,    57,    57,   320,   nil,   nil,   320,   320,   320,   320,
   320,   320,   320,   320,   320,   320,   320,   320,   320,   320,
   320,   320,   320,   168,   nil,   nil,   168,   168,   168,   168,
   168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
   168,   168,   168,   287,   287,   nil,   287,   287,   287,   287,
   287,   287,   287,   287,   287,   287,   287,   287,   287,   287,
   287,   287,   287,   182,   nil,   nil,   182,   182,   182,   182,
   182,   182,   182,   182,   182,   182,   182,   182,   182,   182,
   182,   182,   182,   228,   nil,   nil,   228,   228,   228,   228,
   228,   228,   228,   228,   228,   228,   228,   228,   228,   228,
   228,   228,   228,   193,   nil,   nil,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   193,   193,   194,   nil,   nil,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,   194,   194,   194,
   195,   nil,   nil,   195,   195,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,     3,   nil,   nil,
     3,   nil,   nil,     3,   nil,     3,     3,    17,     3,   nil,
    17,   nil,     3,    17,   nil,    17,    17,   nil,    17,   nil,
   nil,   nil,    17 ]

racc_action_pointer = [
  1283,   541,   nil,  1692,   431,   397,   688,   734,   439,  1407,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1702,   306,   293,
   287,   284,   278,   210,   397,   nil,    19,   nil,   nil,   nil,
    -4,   163,   158,   nil,   nil,   nil,   146,   nil,   512,   445,
    88,   112,   118,    -1,   nil,   157,   227,    -4,   232,   264,
   297,   302,   nil,   326,   550,   nil,   nil,  1578,   nil,   nil,
   nil,   nil,   nil,   869,   892,   915,   302,   nil,   346,   348,
   215,   nil,   nil,   nil,  1088,   nil,   nil,   nil,  1400,   388,
   391,   nil,   397,   399,   391,   400,   473,  1216,   484,   485,
   493,   nil,   494,   268,   nil,   616,  1285,   489,  1255,  1246,
  1207,   448,   431,  1177,   436,   428,  1168,   nil,   401,   112,
   nil,   -45,  1129,   nil,  1099,   403,   372,   642,   nil,  1076,
  1053,  1030,   984,   961,   938,   846,   823,   800,   777,   754,
   731,   708,   279,   639,   593,   570,   547,    86,   280,  1558,
   143,   335,   524,   501,  1469,   324,   nil,   nil,   nil,     1,
   389,   nil,   433,  1365,   375,   478,   nil,   208,   nil,   207,
   nil,   221,   160,   177,   197,   178,   nil,   nil,  1618,   188,
   132,   140,    92,    44,   -16,   nil,  1356,   -24,   185,    14,
    -2,    61,  1658,    68,   nil,   nil,   nil,   nil,    88,   132,
   nil,   nil,   nil,  1698,  1717,  1735,  1327,   875,   852,   921,
   990,   944,   898,   967,    84,   180,   132,   236,   237,   240,
   222,    -4,   357,   nil,   504,   208,   257,   nil,  1492,   nil,
   263,   nil,   nil,   nil,   292,   258,   nil,   nil,  1678,   253,
   nil,   263,   nil,   276,   296,   289,   nil,   nil,   297,   298,
   nil,   nil,   nil,   nil,   nil,   nil,   327,   nil,   318,   305,
   288,     7,   288,   nil,   310,   nil,   662,  1538,   294,   nil,
   nil,   nil,   298,   310,  1372,  1429,   nil,   366,   298,   335,
   313,   304,   -27,  1421,   348,   349,   nil,   351,   nil,   353,
   341,   nil,   332,   324,   -29,   195,   390,  1638,   400,   nil,
   -35,   383,   nil,   nil,   nil,   364,  1280,   nil,   nil,   nil,
   nil,   nil,   392,   383,   nil,   397,   -19,   nil,   400,   nil,
   407,   384,   392,   409,   780,   448,   nil,   490,   nil,   nil,
  1598,   685,  1007,   nil,   nil,    93,   nil,   nil,   nil,   nil,
   396,   394,  1397,  1375,   402,   403,   nil,   nil,   nil,   426,
    64,   462,  1515,   442,   nil,   nil,   466,   nil,   nil,   -41,
   469,   446,   nil,   nil,   nil,   -20,   nil,   nil,    -9,   nil,
   157,   466,   152,   490,   nil,   596,   nil,   471,   507,   nil,
   nil,   nil,   nil,   nil,   508,   487,   -42,   nil,   nil,   nil,
   nil,  1138,   257,   nil ]

racc_action_default = [
  -138,  -195,    -1,  -195,  -195,  -124,  -127,  -195,  -195,   -37,
  -131,  -132,  -133,  -134,  -135,  -136,  -137,  -138,   -76,   -76,
   -76,   -76,   -76,   -76,   -76,  -194,  -195,    -2,    -3,    -9,
   -10,  -195,  -176,  -183,    -4,  -125,  -195,    -5,   -12,   -76,
   -76,  -195,  -195,   -76,   -95,  -195,   -15,  -195,  -195,  -195,
  -113,  -110,  -126,  -195,  -127,    -6,   -12,    -7,   -17,   -18,
   -19,   -20,   -21,  -195,  -195,  -195,  -195,   -63,   -65,  -195,
  -195,    -8,   -23,   -24,   -31,   -26,   -27,   -28,   -37,  -195,
  -195,  -139,  -195,   -76,  -141,  -148,  -195,  -195,  -195,  -195,
  -195,   384,  -195,   -37,  -173,  -195,  -195,  -195,  -195,  -195,
  -195,   -13,  -195,  -195,  -195,  -195,  -195,   -16,  -195,  -195,
   -98,  -195,  -195,  -109,  -195,  -113,  -195,  -127,  -129,  -195,
  -195,  -195,  -195,  -195,  -195,  -195,  -195,  -195,  -195,  -195,
  -195,  -195,  -195,  -195,  -195,  -195,  -195,   -56,   -57,  -195,
  -195,  -174,   -71,  -195,  -195,   -37,   -73,   -74,   -25,   -31,
   -31,   -34,  -195,   -37,  -195,   -87,   -77,  -195,  -142,  -195,
  -149,   -37,  -195,  -195,   -37,   -37,   -11,  -172,  -177,  -195,
  -195,  -195,  -195,  -195,  -195,   -91,   -69,  -195,   -13,  -195,
  -195,  -195,  -115,  -195,  -116,   -97,   -99,  -100,  -195,  -195,
  -114,  -111,  -128,   -39,   -40,   -41,   -42,   -43,   -44,   -45,
   -46,   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,
   -19,  -195,  -195,   -62,  -127,  -174,  -195,   -72,  -195,   -68,
  -195,   -32,   -33,   -29,  -195,   -35,   -38,   -22,   -83,  -195,
   -84,   -85,   -88,  -143,  -151,  -195,  -170,  -171,  -195,  -195,
  -188,  -189,  -190,   -89,   -90,   -14,  -195,   -92,   -71,  -195,
  -119,  -122,  -195,  -112,  -195,   -58,  -195,  -195,  -195,  -175,
   -64,   -66,  -195,  -184,   -37,   -37,   -75,  -195,  -145,  -143,
  -195,  -158,  -156,   -37,  -186,  -186,   -70,  -195,  -104,  -195,
  -117,  -120,  -195,  -195,  -122,  -127,  -195,  -195,  -195,  -130,
   -81,  -195,   -30,   -36,   -86,  -195,   -37,  -144,  -147,  -150,
  -159,  -152,  -195,  -154,  -157,  -195,  -163,  -167,  -195,  -187,
  -195,  -195,  -195,  -195,  -127,  -195,  -123,  -195,   -60,   -59,
   -61,  -195,  -195,   -79,   -80,   -81,  -185,  -140,  -146,  -153,
  -148,  -195,   -37,   -37,  -179,  -179,   -93,   -94,  -118,  -195,
  -195,  -106,  -195,  -195,   -82,  -155,  -195,  -164,  -165,  -124,
  -195,  -195,   -96,  -121,  -105,  -195,   -67,   -78,   -37,  -178,
  -191,  -195,  -191,  -186,  -193,  -127,  -108,   -10,  -195,  -161,
  -162,  -181,  -182,  -192,  -195,  -195,  -195,  -180,  -107,  -160,
  -168,  -195,  -195,  -169 ]

racc_goto_table = [
    57,    71,   140,   177,   234,   102,   215,   149,   308,   310,
   107,   113,   111,   307,   189,   214,   224,   304,   151,    37,
   232,   283,   268,   281,   262,   216,   282,   361,   321,   323,
   154,   183,   349,   351,    25,    34,   211,   188,   371,   109,
   373,   191,   166,   229,    84,    85,    86,    87,    88,    89,
    90,    81,   221,   222,   283,   137,   138,   139,   297,   316,
   145,   170,   144,   344,   323,    99,   100,   118,   180,   104,
   152,   179,   347,   348,   108,   345,   190,   279,   157,   162,
   215,    52,   149,   149,    74,   167,   338,   168,   169,   259,
   171,   172,   173,   151,   151,   326,    55,   374,   182,   295,
   159,   354,    50,    50,   182,   270,   271,   299,   301,   156,
    28,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   209,   293,    52,
   192,   277,   294,   305,   368,   218,   220,   101,   245,   379,
    27,   163,   101,    94,   101,   225,   276,   228,     2,   150,
    50,   366,   235,    74,   359,   238,   239,   155,     1,   nil,
   nil,   161,   nil,   nil,   164,   165,   nil,   nil,    74,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    52,   101,   nil,   nil,   nil,   nil,   nil,   nil,
   178,   181,   nil,   369,   257,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    50,    50,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   343,   nil,   150,   150,   nil,   258,    74,   nil,
   nil,   nil,   233,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   182,   nil,   nil,   nil,   nil,   nil,   287,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   292,   225,   nil,   228,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   101,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   320,   nil,   nil,   nil,   nil,   nil,   nil,   364,   328,    52,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   372,   317,   nil,
   149,   nil,   nil,   nil,   nil,   182,   nil,   340,   269,   nil,
    50,   151,   nil,   342,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   339,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,
    74,   nil,   nil,   nil,   269,   278,   nil,   nil,    74,   nil,
   370,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    74,   nil,   382,   nil,   nil,   nil,   nil,   375,   nil,
   nil,    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    52,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   329,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    74,    74,   nil,
    50,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   367,   nil,   nil,   nil,   nil,   nil,   nil,
    52,   nil,   150,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    50 ]

racc_goto_check = [
     8,     9,    24,    23,    64,    13,    56,    18,    77,    77,
    13,    45,    13,    74,    23,    51,    22,    70,    19,     6,
    35,    49,    61,    47,    27,    25,    41,    80,    28,    29,
    11,    40,    78,    78,    59,     5,    23,    40,    80,     8,
    80,    36,    11,    30,    31,    31,    31,    31,    31,    31,
    31,    59,    20,    20,    49,     8,     8,     8,    61,    41,
    26,    13,     8,    28,    29,    31,    31,     6,    13,    31,
     9,    37,    74,    74,    14,    70,    45,    38,    60,     8,
    56,    10,    18,    18,    10,     9,    47,     8,     8,    51,
     8,     8,     8,    19,    19,    27,     7,    77,     8,    62,
    63,    43,    12,    12,     8,    65,    66,    67,    68,    31,
     4,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,     8,    22,    10,
     6,    25,    35,    71,    72,     8,    21,    12,    13,    73,
     3,    75,    12,    76,    12,     9,    23,     8,     2,    10,
    12,    39,    21,    10,    79,    21,    21,    10,     1,   nil,
   nil,    10,   nil,   nil,    10,    10,   nil,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    10,    12,   nil,   nil,   nil,   nil,   nil,   nil,
    12,    12,   nil,    64,     8,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    12,    12,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    23,   nil,    10,    10,   nil,     6,    10,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     9,     9,   nil,     8,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     8,   nil,   nil,   nil,   nil,   nil,   nil,    24,     9,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    24,     6,   nil,
    18,   nil,   nil,   nil,   nil,     8,   nil,     8,    10,   nil,
    12,    19,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,     6,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
    10,   nil,   nil,   nil,    10,    12,   nil,   nil,    10,   nil,
     9,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,     8,   nil,   nil,   nil,   nil,     6,   nil,
   nil,    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,   nil,
    12,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,
    10,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    12 ]

racc_goto_pointer = [
   nil,   158,   148,   137,   106,    30,    13,    89,    -8,    -8,
    75,   -50,    96,   -36,    28,   nil,   nil,   nil,   -67,   -56,
   -97,    -9,  -137,  -100,   -64,  -117,   -10,  -196,  -262,  -261,
  -112,    26,   nil,   nil,   nil,  -135,   -75,   -33,  -173,  -204,
   -75,  -225,   nil,  -240,   nil,   -39,   nil,  -227,   nil,  -230,
   nil,  -126,   nil,   nil,   nil,   nil,  -135,   nil,   nil,    34,
    -6,  -211,  -169,    15,  -155,  -129,  -128,  -164,  -164,   nil,
  -255,  -140,  -224,  -237,  -260,    53,   111,  -266,  -302,  -195,
  -322 ]

racc_goto_default = [
   nil,   nil,   nil,    17,   263,   362,   nil,    54,   176,   306,
    30,    31,    68,   nil,   nil,    67,    58,   230,    72,    73,
   148,    79,   nil,   217,   nil,   nil,   nil,   309,   nil,    83,
   nil,   nil,   324,   325,   231,   nil,    42,   nil,   nil,    44,
   280,   nil,   nil,   nil,    51,   nil,   115,   nil,   284,    36,
    53,   nil,    10,    11,    12,    13,    14,    15,    16,   nil,
   nil,   nil,   nil,   302,    32,   nil,   nil,   nil,   nil,   303,
   nil,   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 82, :_reduce_none,
  2, 82, :_reduce_2,
  2, 82, :_reduce_3,
  2, 82, :_reduce_4,
  2, 82, :_reduce_5,
  2, 82, :_reduce_6,
  2, 82, :_reduce_7,
  2, 82, :_reduce_8,
  1, 91, :_reduce_9,
  1, 92, :_reduce_10,
  3, 92, :_reduce_11,
  1, 93, :_reduce_12,
  1, 94, :_reduce_13,
  3, 94, :_reduce_14,
  0, 95, :_reduce_15,
  1, 95, :_reduce_none,
  1, 96, :_reduce_17,
  1, 96, :_reduce_18,
  1, 96, :_reduce_19,
  1, 97, :_reduce_20,
  1, 97, :_reduce_21,
  1, 98, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  2, 90, :_reduce_25,
  1, 99, :_reduce_26,
  1, 99, :_reduce_27,
  1, 99, :_reduce_28,
  3, 99, :_reduce_29,
  5, 100, :_reduce_30,
  0, 101, :_reduce_31,
  2, 101, :_reduce_32,
  2, 101, :_reduce_33,
  1, 101, :_reduce_34,
  1, 103, :_reduce_35,
  3, 103, :_reduce_36,
  0, 102, :_reduce_37,
  3, 102, :_reduce_38,
  3, 89, :_reduce_39,
  3, 89, :_reduce_40,
  3, 89, :_reduce_41,
  3, 89, :_reduce_42,
  3, 89, :_reduce_43,
  3, 89, :_reduce_44,
  3, 89, :_reduce_45,
  3, 89, :_reduce_46,
  3, 89, :_reduce_47,
  3, 89, :_reduce_48,
  3, 89, :_reduce_49,
  3, 89, :_reduce_50,
  3, 89, :_reduce_51,
  3, 89, :_reduce_52,
  3, 89, :_reduce_53,
  3, 89, :_reduce_54,
  3, 89, :_reduce_55,
  2, 89, :_reduce_56,
  2, 89, :_reduce_57,
  4, 89, :_reduce_58,
  6, 89, :_reduce_59,
  6, 89, :_reduce_60,
  6, 89, :_reduce_61,
  3, 89, :_reduce_62,
  1, 89, :_reduce_none,
  4, 89, :_reduce_64,
  1, 89, :_reduce_65,
  4, 89, :_reduce_66,
  8, 89, :_reduce_67,
  3, 89, :_reduce_68,
  1, 104, :_reduce_69,
  3, 104, :_reduce_70,
  0, 106, :_reduce_71,
  1, 106, :_reduce_none,
  1, 107, :_reduce_73,
  1, 107, :_reduce_74,
  4, 110, :_reduce_75,
  0, 112, :_reduce_76,
  2, 112, :_reduce_77,
  3, 113, :_reduce_78,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  0, 109, :_reduce_81,
  2, 109, :_reduce_82,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 116, :_reduce_85,
  3, 116, :_reduce_86,
  0, 111, :_reduce_87,
  1, 111, :_reduce_none,
  4, 88, :_reduce_89,
  4, 88, :_reduce_90,
  3, 88, :_reduce_91,
  4, 88, :_reduce_92,
  7, 88, :_reduce_93,
  7, 88, :_reduce_94,
  1, 88, :_reduce_none,
  8, 88, :_reduce_96,
  3, 88, :_reduce_97,
  2, 88, :_reduce_98,
  3, 88, :_reduce_99,
  3, 88, :_reduce_100,
  1, 123, :_reduce_101,
  2, 123, :_reduce_102,
  1, 118, :_reduce_103,
  3, 118, :_reduce_104,
  8, 120, :_reduce_105,
  0, 124, :_reduce_106,
  4, 124, :_reduce_107,
  2, 124, :_reduce_108,
  2, 125, :_reduce_109,
  1, 117, :_reduce_110,
  3, 117, :_reduce_111,
  3, 127, :_reduce_112,
  0, 126, :_reduce_113,
  2, 126, :_reduce_114,
  1, 121, :_reduce_none,
  1, 121, :_reduce_116,
  1, 128, :_reduce_117,
  3, 128, :_reduce_118,
  0, 119, :_reduce_119,
  1, 119, :_reduce_none,
  4, 129, :_reduce_121,
  0, 122, :_reduce_122,
  2, 122, :_reduce_123,
  0, 130, :_reduce_124,
  1, 130, :_reduce_125,
  1, 131, :_reduce_126,
  0, 87, :_reduce_127,
  3, 87, :_reduce_128,
  2, 87, :_reduce_129,
  4, 105, :_reduce_130,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  0, 140, :_reduce_138,
  2, 140, :_reduce_139,
  7, 133, :_reduce_140,
  0, 141, :_reduce_141,
  1, 141, :_reduce_142,
  0, 142, :_reduce_143,
  2, 142, :_reduce_144,
  0, 143, :_reduce_145,
  2, 143, :_reduce_146,
  6, 134, :_reduce_147,
  0, 144, :_reduce_148,
  1, 144, :_reduce_149,
  2, 146, :_reduce_150,
  0, 147, :_reduce_151,
  2, 147, :_reduce_152,
  2, 150, :_reduce_153,
  1, 151, :_reduce_154,
  3, 151, :_reduce_155,
  0, 149, :_reduce_156,
  1, 149, :_reduce_none,
  0, 148, :_reduce_158,
  1, 148, :_reduce_159,
  12, 135, :_reduce_160,
  1, 153, :_reduce_161,
  1, 153, :_reduce_162,
  1, 155, :_reduce_163,
  3, 155, :_reduce_164,
  3, 155, :_reduce_165,
  0, 152, :_reduce_166,
  1, 152, :_reduce_167,
  1, 154, :_reduce_168,
  3, 154, :_reduce_169,
  4, 136, :_reduce_170,
  4, 137, :_reduce_171,
  3, 145, :_reduce_172,
  2, 156, :_reduce_173,
  0, 132, :_reduce_174,
  2, 132, :_reduce_175,
  0, 157, :_reduce_176,
  2, 157, :_reduce_177,
  9, 138, :_reduce_178,
  0, 159, :_reduce_179,
  4, 159, :_reduce_180,
  2, 160, :_reduce_181,
  2, 160, :_reduce_182,
  1, 85, :_reduce_183,
  1, 108, :_reduce_184,
  3, 108, :_reduce_185,
  0, 158, :_reduce_186,
  1, 158, :_reduce_none,
  4, 86, :_reduce_188,
  4, 86, :_reduce_189,
  4, 86, :_reduce_190,
  0, 161, :_reduce_191,
  2, 161, :_reduce_192,
  9, 139, :_reduce_193,
  1, 83, :_reduce_194 ]

racc_reduce_n = 195

racc_shift_n = 384

racc_token_table = {
  false => 0,
  :error => 1,
  "forall" => 2,
  "exists" => 3,
  "old" => 4,
  "[" => 5,
  "]" => 6,
  "!" => 7,
  "*" => 8,
  "/" => 9,
  "%" => 10,
  "+" => 11,
  "-" => 12,
  "++" => 13,
  "==" => 14,
  "!=" => 15,
  "<" => 16,
  ">" => 17,
  "<=" => 18,
  ">=" => 19,
  "<:" => 20,
  "&&" => 21,
  "||" => 22,
  "==>" => 23,
  "<==>" => 24,
  "if" => 25,
  "then" => 26,
  "else" => 27,
  ":" => 28,
  "(" => 29,
  ")" => 30,
  :IDENTIFIER => 31,
  :NUMBER => 32,
  :BITVECTOR => 33,
  :STRING => 34,
  :BVTYPE => 35,
  :PARSE_DECL => 36,
  :PARSE_PARAM => 37,
  :PARSE_SPEC => 38,
  :PARSE_BLOCKS => 39,
  :PARSE_STMT => 40,
  :PARSE_EXPR => 41,
  :PARSE_TYPE => 42,
  "," => 43,
  "true" => 44,
  "false" => 45,
  "bool" => 46,
  "int" => 47,
  ":=" => 48,
  "|" => 49,
  "::" => 50,
  "{:" => 51,
  "}" => 52,
  "{" => 53,
  "assert" => 54,
  ";" => 55,
  "assume" => 56,
  "havoc" => 57,
  "call" => 58,
  "while" => 59,
  "break" => 60,
  "return" => 61,
  "goto" => 62,
  "invariant" => 63,
  "free" => 64,
  "type" => 65,
  "finite" => 66,
  "=" => 67,
  "const" => 68,
  "unique" => 69,
  "complete" => 70,
  "function" => 71,
  "returns" => 72,
  "axiom" => 73,
  "var" => 74,
  "where" => 75,
  "procedure" => 76,
  "requires" => 77,
  "modifies" => 78,
  "ensures" => 79,
  "implementation" => 80 }

racc_nt_base = 81

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"forall\"",
  "\"exists\"",
  "\"old\"",
  "\"[\"",
  "\"]\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"++\"",
  "\"==\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"<:\"",
  "\"&&\"",
  "\"||\"",
  "\"==>\"",
  "\"<==>\"",
  "\"if\"",
  "\"then\"",
  "\"else\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "IDENTIFIER",
  "NUMBER",
  "BITVECTOR",
  "STRING",
  "BVTYPE",
  "PARSE_DECL",
  "PARSE_PARAM",
  "PARSE_SPEC",
  "PARSE_BLOCKS",
  "PARSE_STMT",
  "PARSE_EXPR",
  "PARSE_TYPE",
  "\",\"",
  "\"true\"",
  "\"false\"",
  "\"bool\"",
  "\"int\"",
  "\":=\"",
  "\"|\"",
  "\"::\"",
  "\"{:\"",
  "\"}\"",
  "\"{\"",
  "\"assert\"",
  "\";\"",
  "\"assume\"",
  "\"havoc\"",
  "\"call\"",
  "\"while\"",
  "\"break\"",
  "\"return\"",
  "\"goto\"",
  "\"invariant\"",
  "\"free\"",
  "\"type\"",
  "\"finite\"",
  "\"=\"",
  "\"const\"",
  "\"unique\"",
  "\"complete\"",
  "\"function\"",
  "\"returns\"",
  "\"axiom\"",
  "\"var\"",
  "\"where\"",
  "\"procedure\"",
  "\"requires\"",
  "\"modifies\"",
  "\"ensures\"",
  "\"implementation\"",
  "$start",
  "target",
  "program",
  "decl",
  "param_decl",
  "spec",
  "blocks",
  "stmt",
  "expr",
  "type",
  "name",
  "names",
  "ident",
  "idents",
  "idents_opt",
  "literal",
  "bool_lit",
  "string",
  "type_atom",
  "map_type",
  "tc_args",
  "type_args",
  "types",
  "exprs",
  "body",
  "exprs_opt",
  "quantifier",
  "param_decls",
  "ants",
  "attr",
  "enss_opt",
  "attrs",
  "trigger",
  "ant",
  "ens",
  "enss",
  "lhss",
  "call_lhs",
  "wc_exprs_opt",
  "if_stmt",
  "wc_expr",
  "loop_invs",
  "stmts",
  "else_stmt",
  "lhs",
  "selects",
  "select",
  "wc_exprs",
  "loop_inv",
  "free_opt",
  "label",
  "var_decls",
  "type_decl",
  "const_decl",
  "func_decl",
  "axiom_decl",
  "var_decl",
  "proc_decl",
  "impl_decl",
  "decls",
  "finite_opt",
  "tc_params",
  "type_syn",
  "unique_opt",
  "typed_ids",
  "order_spec",
  "parent_info",
  "complete_opt",
  "parent_edges_opt",
  "parent_edge",
  "parent_edges",
  "fargs_opt",
  "farg",
  "fbody",
  "fargs",
  "typed_ids_where",
  "where_clause",
  "param_decls_opt",
  "out_params",
  "pspec",
  "specs" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_2(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_3(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_4(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_6(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_7(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_8(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_9(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_10(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_11(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_12(val, _values)
     {name: val[0]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_13(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_14(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_15(val, _values)
     [] 
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_17(val, _values)
     BooleanLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_18(val, _values)
     BitvectorLiteral.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_19(val, _values)
     IntegerLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_20(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values)
     false 
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_25(val, _values)
     CustomType.new name: val[0], arguments: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_26(val, _values)
     Type::Boolean 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_27(val, _values)
     Type::Integer 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_28(val, _values)
     BitvectorType.new width: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_29(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_30(val, _values)
        MapType.new arguments: val[0], domain: val[2], range: val[4]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_31(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_32(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_33(val, _values)
     [(CustomType.new name: val[0], arguments: val[1])] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_34(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_35(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_36(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_37(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_38(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_39(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_40(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_41(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_42(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_43(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_44(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_45(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_46(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_47(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_48(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_49(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_50(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_51(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_52(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_53(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_54(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_55(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_56(val, _values)
     LogicalNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_57(val, _values)
     ArithmeticNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_58(val, _values)
     MapSelect.new map: val[0], indexes: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_59(val, _values)
     MapUpdate.new map: val[0], indexes: val[2], value: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_60(val, _values)
     BitvectorExtract.new bitvector: val[0], msb: val[2], lsb: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_61(val, _values)
            IfExpression.new condition: val[1], then: val[3], else: val[5]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_62(val, _values)
     CodeExpression.new body: val[1] 
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_64(val, _values)
            id = FunctionIdentifier.new val[0]
        FunctionApplication.new function: id, arguments: val[2]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_65(val, _values)
     StorageIdentifier.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_66(val, _values)
     OldExpression.new expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_67(val, _values)
            QuantifiedExpression.new quantifier: val[1], type_arguments: val[2],
          variables: val[3],
          attributes: val[5].select{|a| a.is_a?(Hash)},
          triggers: val[5].select{|es| es.is_a?(Array)}.map{|es| Trigger.new(expressions: es)},
          expression: val[6]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_68(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_69(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_70(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_71(val, _values)
     [] 
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_73(val, _values)
    'forall'
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_74(val, _values)
    'exists'
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_75(val, _values)
     {val[1].to_sym => val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_76(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_77(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_78(val, _values)
     val[1] 
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_81(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_82(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_85(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_86(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_87(val, _values)
     [] 
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_89(val, _values)
     AssertStatement.new attributes: val[1], expression: val[2], line_number: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_90(val, _values)
     AssumeStatement.new attributes: val[1], expression: val[2], line_number: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_91(val, _values)
          ids = val[1].map{|id| StorageIdentifier.new id}
      HavocStatement.new identifiers: ids, line_number: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_92(val, _values)
     AssignStatement.new lhs: val[0], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_93(val, _values)
          CallStatement.new attributes: val[1], assignments: val[2][:rets],
      procedure: val[2][:name], arguments: val[4], line_number: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_94(val, _values)
          id = ProcedureIdentifier.new val[2]
      CallStatement.new assignments: nil, procedure: id, arguments: val[4],
      line_number: val[0]
    
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_96(val, _values)
          WhileStatement.new condition: val[2], invariants: val[4], blocks: val[6],
      line_number: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_97(val, _values)
          ids = val[1].map{|id| LabelIdentifier.new id}
      BreakStatement.new identifiers: ids, line_number: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_98(val, _values)
     ReturnStatement.new line_number: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_99(val, _values)
     ReturnStatement.new expression: val[1], line_number: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_100(val, _values)
          ids = val[1].map{|id| LabelIdentifier.new id}
      GotoStatement.new identifiers: ids, line_number: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_101(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_102(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_103(val, _values)
     {name: ProcedureIdentifier.new(val[0]), rets: []} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_104(val, _values)
          ids = val[0].map{|id| StorageIdentifier.new id}
      id = ProcedureIdentifier.new val[2]
      {name: id, rets: ids}
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_105(val, _values)
     IfStatement.new condition: val[2], blocks: val[5], else: val[7], line_number: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_106(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_107(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_108(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_109(val, _values)
        id = StorageIdentifier.new val[0]
    val[1].reduce(id){|m,x| MapSelect.new map: m, indexes: x}
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_110(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_111(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_112(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_113(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_114(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_116(val, _values)
     Expression::Wildcard 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_117(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_118(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_119(val, _values)
     [] 
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_121(val, _values)
     LoopInvariant.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_122(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_123(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_124(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_125(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 197)
  def _reduce_126(val, _values)
     Label.new name: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_127(val, _values)
     [Block.new] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 202)
  def _reduce_128(val, _values)
          bs = val[2]
      bs.first.labels.unshift val[0]
      bs
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_129(val, _values)
          bs = val[1]
      bs.unshift(Block.new) unless bs.first.labels.empty?
      bs.first.unshift val[0]
      bs
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_130(val, _values)
     Body.new declarations: val[1], blocks: val[2] 
  end
.,.,

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

# reduce 137 omitted

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_138(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 223)
  def _reduce_139(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_140(val, _values)
        if val[5] && val[2]
      abort "Illegal declaration of type #{([val[3]] + val[4]) * " "}"
    end
    TypeDeclaration.new attributes: val[1], finite: val[2], name: val[3],
      arguments: val[4], type: val[5]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_141(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_142(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_143(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 233)
  def _reduce_144(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_145(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 234)
  def _reduce_146(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_147(val, _values)
        ConstantDeclaration.new(val[3].merge({attributes: val[1], unique: val[2], order_spec: val[4]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_148(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_149(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_150(val, _values)
     [val[0],val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_151(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_152(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 243)
  def _reduce_153(val, _values)
        id = StorageIdentifier.new val[1]
    [val[0],id]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_154(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_155(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 247)
  def _reduce_156(val, _values)
     [] 
  end
.,.,

# reduce 157 omitted

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_158(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 248)
  def _reduce_159(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 251)
  def _reduce_160(val, _values)
        FunctionDeclaration.new attributes: val[1], name: val[2],
      type_arguments: val[3], arguments: val[5], return: val[9], body: val[11]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_161(val, _values)
     StorageDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 257)
  def _reduce_162(val, _values)
     StorageDeclaration.new(names: [], type: val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_163(val, _values)
     [{names: [], type: val[0]}] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 262)
  def _reduce_164(val, _values)
          if val[2].first[:names].empty?
        [{names: [], type: val[0]}] + val[2]
      else
        val[2].first[:names].unshift(val[0])
        val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_165(val, _values)
          # assert val[2].first[:names].empty?

      unless val[0].respond_to?(:name)
        raise ParseError, "parse error on value #{val[0]}: expecting name."
      end

      if val[2].first[:names].empty?
        val[2].first[:names].unshift(val[0])
        val[2]
      else
        [{names: [val[0]], type: val[2].first[:names].shift}] + val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_166(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_167(val, _values)
          val[0].map do |x|
        x[:names].map!{|t| t.name}
        StorageDeclaration.new(x)
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_168(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_169(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 294)
  def _reduce_170(val, _values)
        AxiomDeclaration.new attributes: val[1], expression: val[2]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_171(val, _values)
        VariableDeclaration.new(val[2].merge({attributes: val[1]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_172(val, _values)
     {names: val[0], type: val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_173(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_174(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 302)
  def _reduce_175(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_176(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 303)
  def _reduce_177(val, _values)
     {where: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 307)
  def _reduce_178(val, _values)
          ProcedureDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        specifications: val[8][:specs], body: val[8][:body]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_179(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 311)
  def _reduce_180(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_181(val, _values)
     {specs: val[1], body: nil} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_182(val, _values)
     {specs: val[0], body: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_183(val, _values)
     StorageDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_184(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 315)
  def _reduce_185(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 316)
  def _reduce_186(val, _values)
     [] 
  end
.,.,

# reduce 187 omitted

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_188(val, _values)
     RequiresClause.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 321)
  def _reduce_189(val, _values)
          ids = val[2].map{|id| StorageIdentifier.new id}
      ModifiesClause.new free: val[0], identifiers: ids
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 324)
  def _reduce_190(val, _values)
     EnsuresClause.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_191(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 325)
  def _reduce_192(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 329)
  def _reduce_193(val, _values)
          ImplementationDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        specifications: [], body: val[8]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 334)
  def _reduce_194(val, _values)
     Program.new declarations: val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class BoogieLanguage


