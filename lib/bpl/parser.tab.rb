#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.11
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex'
require_relative 'ast/type'
require_relative 'ast/expression'
require_relative 'ast/specification'
require_relative 'ast/statement'
require_relative 'ast/declaration'
require_relative 'ast/program'
include Bpl::AST

class BoogieLanguage < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 321)
def parse(input)
  scan_str(input)
end

def parse_decl(str)
  scan_evaluate str
  @rex_tokens.unshift [:PARSE_DECL, ""]
  do_parse
end

def parse_param(str)
  scan_evaluate str
  @rex_tokens.unshift [:PARSE_PARAM, ""]
  do_parse
end

def parse_spec(str)
  scan_evaluate str
  @rex_tokens.unshift [:PARSE_SPEC, ""]
  do_parse
end

def parse_stmt(str)
  scan_evaluate str
  @rex_tokens.unshift [:PARSE_STMT, ""]
  do_parse
end

def parse_expr(str)
  scan_evaluate str
  @rex_tokens.unshift [:PARSE_EXPR, ""]
  do_parse
end

def parse_type(str)
  scan_evaluate str
  @rex_tokens.unshift [:PARSE_TYPE, ""]
  do_parse
end

def parse_str(str)
  case str
  when /\b(requires|ensures|modifies|invariant)\b/
    parse_spec(str)
  when /\b(type|const|function|axiom|var|procedure|implementation)\b/
    parse_decl(str)
  when /\b(assert|assume|havoc|call|if|while|break|goto|return)\b|:=/
    parse_stmt(str)
  when /[^<:]:[^:]/
    parse_param(str)
  else
    parse_expr(str)
  end
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
   125,   235,   289,   122,   123,   124,   120,   121,   119,   112,
   113,   114,   115,   116,   117,   118,   111,   110,   109,   108,
   125,    48,    37,   122,   123,   124,   120,   121,   119,   112,
   113,   114,   115,   116,   117,   118,   111,   110,   109,   108,
    97,    74,   236,   302,  -118,    34,   125,   263,   223,   122,
   123,   124,   120,   121,   119,   112,   113,   114,   115,   116,
   117,   118,   111,   110,   109,   108,   125,    34,   335,   122,
   123,   124,   120,   121,   119,   112,   113,   114,   115,   116,
   117,   118,   111,   110,   109,   108,   125,    74,   227,   122,
   123,   124,   125,   221,   220,   122,   123,   124,   120,   121,
   119,   112,   113,   114,   115,   116,   117,   118,   111,   110,
   109,   108,   125,   228,   222,   122,   123,   124,   120,   121,
   119,   112,   113,   114,   115,   116,   117,   118,   111,   110,
   109,   108,  -141,    74,   365,   302,   364,    72,   125,   230,
   216,   122,   123,   124,   120,   121,   119,   112,   113,   114,
   115,   116,   117,   118,   111,   110,   109,   108,    72,   313,
   224,   132,   133,    61,  -118,    34,    57,    34,   146,   231,
   232,    58,    34,   312,     3,     4,     5,     6,     7,     8,
  -118,  -118,  -118,   368,   233,  -118,  -118,  -118,    62,   -36,
    37,    54,    53,   -97,   -36,   217,    72,   -36,    28,    28,
    72,    17,    55,    56,    18,    72,   160,    19,    72,    20,
    21,   206,    22,    70,   -30,    28,    23,   -36,    70,    69,
    28,    70,   203,    28,    69,    72,    84,    69,    72,    67,
    68,    88,    89,    90,    67,    68,    61,    67,    68,    57,
   125,    70,    61,    28,    58,    57,    37,    69,   105,  -187,
    58,   341,   172,   171,    37,    37,   125,    67,    68,   125,
    34,    62,   125,    37,    54,    53,   234,    62,   161,    37,
    54,    53,   207,   237,   160,    55,    56,    61,    28,   241,
    57,    55,    56,    61,    17,    58,    57,    18,   242,    37,
    19,    58,    20,    21,   243,    22,   244,    28,   249,    23,
   250,   251,    62,   252,    37,    54,    53,    48,    62,    28,
    37,    54,    53,   295,    28,    37,    55,    56,    61,    28,
    28,    57,    55,    56,    61,   125,    58,    57,   122,   123,
   124,   263,    58,   264,    38,    28,    39,    40,    42,    44,
    45,    46,    47,    62,   266,    37,   194,    53,    48,    62,
   267,    37,    54,    53,   295,   146,   144,    55,    56,    61,
    74,   272,    57,    55,    56,    61,   125,    58,    57,   122,
   123,   124,    28,    58,   274,    38,   276,    39,    40,    42,
    44,    45,    46,    47,    62,    28,    37,    54,    53,    48,
    62,    28,    37,    54,    53,    37,    28,    28,    55,    56,
    61,   287,   288,    57,    55,    56,    61,    28,    58,    57,
   263,   291,   139,   294,    58,   129,    38,   299,    39,    40,
    42,    44,    45,    46,    47,    62,   128,    37,    54,    53,
    48,    62,   107,    37,    54,    53,   295,    28,   307,    55,
    56,    61,   105,    37,    57,    55,    56,    61,   310,    58,
    57,   311,   103,   314,   315,    58,   316,    38,   317,    39,
    40,    42,    44,    45,    46,    47,    62,    37,    37,    54,
    53,    48,    62,   101,    37,    54,    53,   295,    37,    -8,
    55,    56,    61,   322,    98,    57,    55,    56,    61,   324,
    58,    57,    74,    95,    37,   146,    58,   329,    38,    74,
    39,    40,    42,    44,    45,    46,    47,    62,    74,    37,
    54,    53,   333,    62,   333,    37,    54,    53,    72,    25,
    74,    55,    56,    87,   338,   339,    61,    55,    56,    57,
   170,    70,    61,    28,    58,    57,    85,    69,   125,   344,
    58,   122,   123,   124,   120,   121,   119,    67,    68,    72,
   345,    62,    84,    37,    54,    53,    83,    62,   345,    37,
    54,    53,    70,    74,    28,    55,    56,    61,    69,    28,
    57,    55,    56,    61,    72,    58,    57,    21,    67,    68,
   345,    58,    74,   359,   360,    21,    74,    70,    74,    28,
   366,    74,    62,    69,    37,    54,    53,   229,    62,   nil,
    37,    54,    53,    67,    68,   nil,    55,    56,    61,   nil,
   nil,    57,    55,    56,    61,    72,    58,    57,   nil,   nil,
   125,   nil,    58,   122,   123,   124,   120,   121,    70,   nil,
    28,   nil,   nil,    62,    69,    37,    54,    53,   nil,    62,
   nil,    37,    54,    53,    67,    68,   nil,    55,    56,    61,
   nil,   nil,    57,    55,    56,    61,    72,    58,    57,   nil,
   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,    70,
   nil,    28,   nil,   nil,    62,    69,    37,    54,    53,   nil,
    62,   nil,    37,    54,    53,    67,    68,   nil,    55,    56,
    61,   nil,   nil,    57,    55,    56,    61,    72,    58,    57,
   nil,   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,
    70,   nil,    28,   nil,   nil,    62,    69,    37,    54,    53,
   nil,    62,   nil,    37,    54,    53,    67,    68,   nil,    55,
    56,    61,   nil,   nil,    57,    55,    56,    61,    72,    58,
    57,   nil,   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,
   nil,    70,   nil,    28,   nil,   nil,    62,    69,    37,    54,
    53,   nil,    62,   nil,    37,    54,    53,    67,    68,   nil,
    55,    56,    61,   nil,   nil,    57,    55,    56,    61,    72,
    58,    57,   nil,   nil,   nil,   nil,    58,   nil,   nil,   nil,
   nil,   nil,    70,  -159,    28,   nil,   nil,    62,    69,    37,
    54,    53,   nil,    62,   nil,    37,    54,    53,    67,    68,
   nil,    55,    56,    61,   nil,   nil,    57,    55,    56,    61,
    17,    58,    57,    18,   nil,   nil,    19,    58,    20,    21,
   nil,    22,   nil,   nil,   nil,    23,   nil,   nil,    62,   nil,
    37,    54,    53,   nil,    62,   nil,    37,    54,    53,   207,
   nil,   nil,    55,    56,    61,   nil,   nil,    57,    55,    56,
    61,    72,    58,    57,   170,   nil,   nil,   nil,    58,   nil,
   nil,   nil,   nil,   nil,    70,   nil,    28,   nil,   nil,    62,
    69,    37,    54,    53,   nil,    62,   nil,    37,    54,    53,
    67,    68,   nil,    55,    56,    61,   nil,   nil,    57,    55,
    56,    61,    72,    58,    57,   nil,   nil,   nil,   nil,    58,
   nil,   nil,   nil,   nil,   nil,    70,   nil,    28,   nil,   nil,
    62,    69,    37,    54,    53,   nil,    62,   nil,    37,    54,
    53,    67,    68,   nil,    55,    56,   nil,   nil,   nil,    61,
    55,    56,    57,   170,   nil,    61,    72,    58,    57,   170,
   nil,   nil,   nil,    58,   nil,   nil,   nil,   nil,   nil,    70,
   nil,    28,   nil,   nil,    62,    69,    37,    54,    53,   nil,
    62,   nil,    37,    54,    53,    67,    68,   nil,    55,    56,
    61,   nil,   nil,    57,    55,    56,    61,   nil,    58,    57,
   nil,   nil,   125,   nil,    58,   122,   123,   124,   120,   121,
   119,   nil,   nil,   nil,   nil,    62,   nil,    37,    54,    53,
   nil,    62,   nil,    37,    54,    53,   nil,   nil,   nil,    55,
    56,    61,   nil,   nil,    57,    55,    56,    61,   nil,    58,
    57,   nil,   nil,   125,   nil,    58,   122,   123,   124,   120,
   121,   119,   nil,   nil,   nil,   nil,    62,   nil,    37,    54,
    53,   nil,    62,   nil,    37,    54,    53,   nil,   nil,   nil,
    55,    56,    61,   nil,   nil,    57,    55,    56,    61,   nil,
    58,    57,   nil,   nil,   125,   nil,    58,   122,   123,   124,
   120,   121,   119,   nil,   nil,   nil,   nil,    62,   nil,    37,
    54,    53,   nil,    62,   nil,    37,    54,    53,   nil,   nil,
   nil,    55,    56,    61,   nil,   nil,    57,    55,    56,    61,
   nil,    58,    57,   nil,   nil,   125,   nil,    58,   122,   123,
   124,   120,   121,   119,   nil,   nil,   nil,   nil,    62,   nil,
    37,    54,    53,   nil,    62,   nil,    37,    54,    53,   nil,
   nil,   nil,    55,    56,   nil,   nil,   nil,   125,    55,    56,
   122,   123,   124,   120,   121,   119,   112,   113,   114,   115,
   116,   117,   118,   111,   110,   109,   108,   125,   nil,   nil,
   122,   123,   124,   120,   121,   119,   nil,   nil,   nil,   nil,
   nil,   nil,   125,   nil,   226,   122,   123,   124,   120,   121,
   119,   112,   113,   114,   115,   116,   117,   118,   111,   110,
   109,   108,   nil,   nil,   nil,   125,   nil,   238,   122,   123,
   124,   120,   121,   119,   112,   113,   114,   115,   116,   117,
   118,   111,   110,   109,   108,   nil,   nil,   nil,   125,   nil,
   199,   122,   123,   124,   120,   121,   119,   112,   113,   114,
   115,   116,   117,   118,   111,   110,   109,   108,   nil,   nil,
   nil,   125,   nil,   337,   122,   123,   124,   120,   121,   119,
   112,   113,   114,   115,   116,   117,   118,   111,   110,   109,
   108,   125,   nil,   nil,   122,   123,   124,   120,   121,   119,
   112,   113,   114,   115,   116,   117,   118,   111,   110,   109,
   108,   125,   300,   nil,   122,   123,   124,   120,   121,   119,
   112,   113,   114,   115,   116,   117,   118,   111,   110,   109,
   108,   125,   nil,   nil,   122,   123,   124,   120,   121,   119,
   112,   113,   114,   115,   116,   117,   118,   111,   110,   109,
   108,   125,   nil,   nil,   122,   123,   124,   120,   121,   119,
   112,   113,   114,   115,   116,   117,   118,   111,   110,   109,
   108,   125,   nil,   nil,   122,   123,   124,   120,   121,   119,
   112,   113,   114,   115,   116,   117,   118,   111,   110,   109,
   125,   nil,   nil,   122,   123,   124,   120,   121,   119,   112,
   113,   114,   115,   116,   117,   118,   111,   110,   125,   nil,
   nil,   122,   123,   124,   120,   121,   119,   112,   113,   114,
   115,   116,   117,   118,   111,   125,   nil,   nil,   122,   123,
   124,   120,   121,   119,   112,   113,   114,   115,   116,   117,
   118,   125,   nil,   nil,   122,   123,   124,   120,   121,   119 ]

racc_action_check = [
   158,   195,   257,   158,   158,   158,   158,   158,   158,   158,
   158,   158,   158,   158,   158,   158,   158,   158,   158,   158,
   319,   294,   160,   319,   319,   319,   319,   319,   319,   319,
   319,   319,   319,   319,   319,   319,   319,   319,   319,   319,
    42,   266,   195,   266,   261,   261,   155,   294,   158,   155,
   155,   155,   155,   155,   155,   155,   155,   155,   155,   155,
   155,   155,   155,   155,   155,   155,   157,     5,   319,   157,
   157,   157,   157,   157,   157,   157,   157,   157,   157,   157,
   157,   157,   157,   157,   157,   157,   190,    42,   163,   190,
   190,   190,   148,   156,   155,   148,   148,   148,   148,   148,
   148,   148,   148,   148,   148,   148,   148,   148,   148,   148,
   148,   148,   159,   165,   157,   159,   159,   159,   159,   159,
   159,   159,   159,   159,   159,   159,   159,   159,   159,   159,
   159,   159,   249,   305,   359,   305,   359,   151,   367,   167,
   148,   367,   367,   367,   367,   367,   367,   367,   367,   367,
   367,   367,   367,   367,   367,   367,   367,   367,   150,   282,
   159,    62,    62,    62,   231,   231,    62,   343,   249,   169,
   173,    62,   341,   282,     0,     0,     0,     0,     0,     0,
   343,   343,   343,   367,   174,   341,   341,   341,    62,   348,
    62,    62,    62,   164,    66,   149,   147,   135,   145,   143,
   348,     0,    62,    62,     0,    66,   164,     0,   135,     0,
     0,   140,     0,   348,   348,   348,     0,   136,    66,   348,
    66,   135,   138,   135,    66,   131,   348,   135,   136,   348,
   348,    35,    35,    35,    66,    66,    57,   135,   135,    57,
   126,   136,   141,   136,    57,   141,   107,   136,   106,   332,
   141,   332,   102,   100,    97,    96,   191,   136,   136,   192,
   332,    57,   193,    57,    57,    57,   194,   141,    94,   141,
   141,   141,   141,   196,    93,    57,    57,   129,   200,   204,
   129,   141,   141,   128,     3,   129,   128,     3,   205,    89,
     3,   128,     3,     3,   209,     3,   211,   213,   214,     3,
   215,   218,   129,   219,   129,   129,   129,   297,   128,    84,
   128,   128,   128,   297,    82,   229,   129,   129,   125,    81,
    80,   125,   128,   128,    92,   127,   125,    92,   127,   127,
   127,   232,    92,   234,   297,    78,   297,   297,   297,   297,
   297,   297,   297,   125,   239,   125,   125,   125,   263,    92,
   240,    92,    92,    92,   263,    77,    76,   125,   125,   123,
    75,   245,   123,    92,    92,   122,   189,   123,   122,   189,
   189,   189,   246,   122,   247,   263,   248,   263,   263,   263,
   263,   263,   263,   263,   123,    74,   123,   123,   123,     6,
   122,    72,   122,   122,   122,     6,   251,   252,   123,   123,
   121,   254,   256,   121,   122,   122,   302,     4,   121,   302,
   259,   260,    71,   262,   302,    61,     6,   264,     6,     6,
     6,     6,     6,     6,     6,   121,    60,   121,   121,   121,
   357,   302,    50,   302,   302,   302,   357,   267,   271,   121,
   121,   301,    49,   278,   301,   302,   302,   120,   279,   301,
   120,   281,    48,   284,   286,   120,   287,   357,   288,   357,
   357,   357,   357,   357,   357,   357,   301,    47,   301,   301,
   301,   322,   120,    46,   120,   120,   120,   322,    45,   295,
   301,   301,   119,   296,    44,   119,   120,   120,   291,   298,
   119,   291,    17,    41,    40,   310,   291,   311,   322,    39,
   322,   322,   322,   322,   322,   322,   322,   119,    38,   119,
   119,   119,   314,   291,   315,   291,   291,   291,   242,     1,
    18,   119,   119,    31,   326,   329,   289,   291,   291,   289,
   289,   242,   118,   242,   289,   118,    30,   242,   186,   333,
   118,   186,   186,   186,   186,   186,   186,   242,   242,   139,
   334,   289,    29,   289,   289,   289,    25,   118,   342,   118,
   118,   118,   139,    23,   139,   289,   289,   117,   139,   344,
   117,   118,   118,   116,   241,   117,   116,   345,   139,   139,
   346,   116,    22,   349,   355,   356,    21,   241,    20,   241,
   362,    19,   117,   241,   117,   117,   117,   166,   116,   nil,
   116,   116,   116,   241,   241,   nil,   117,   117,   115,   nil,
   nil,   115,   116,   116,   124,   339,   115,   124,   nil,   nil,
   188,   nil,   124,   188,   188,   188,   188,   188,   339,   nil,
   339,   nil,   nil,   115,   339,   115,   115,   115,   nil,   124,
   nil,   124,   124,   124,   339,   339,   nil,   115,   115,    58,
   nil,   nil,    58,   124,   124,   114,   312,    58,   114,   nil,
   nil,   nil,   nil,   114,   nil,   nil,   nil,   nil,   nil,   312,
   nil,   312,   nil,   nil,    58,   312,    58,    58,    58,   nil,
   114,   nil,   114,   114,   114,   312,   312,   nil,    58,    58,
   113,   nil,   nil,   113,   114,   114,   112,     8,   113,   112,
   nil,   nil,   nil,   nil,   112,   nil,   nil,   nil,   nil,   nil,
     8,   nil,     8,   nil,   nil,   113,     8,   113,   113,   113,
   nil,   112,   nil,   112,   112,   112,     8,     8,   nil,   113,
   113,     7,   nil,   nil,     7,   112,   112,   111,   272,     7,
   111,   nil,   nil,   nil,   nil,   111,   nil,   nil,   nil,   nil,
   nil,   272,   nil,   272,   nil,   nil,     7,   272,     7,     7,
     7,   nil,   111,   nil,   111,   111,   111,   272,   272,   nil,
     7,     7,   110,   nil,   nil,   110,   111,   111,   109,   250,
   110,   109,   nil,   nil,   nil,   nil,   109,   nil,   nil,   nil,
   nil,   nil,   250,   250,   250,   nil,   nil,   110,   250,   110,
   110,   110,   nil,   109,   nil,   109,   109,   109,   250,   250,
   nil,   110,   110,   108,   nil,   nil,   108,   109,   109,   244,
    16,   108,   244,    16,   nil,   nil,    16,   244,    16,    16,
   nil,    16,   nil,   nil,   nil,    16,   nil,   nil,   108,   nil,
   108,   108,   108,   nil,   244,   nil,   244,   244,   244,   244,
   nil,   nil,   108,   108,   105,   nil,   nil,   105,   244,   244,
   103,   313,   105,   103,   103,   nil,   nil,   nil,   103,   nil,
   nil,   nil,   nil,   nil,   313,   nil,   313,   nil,   nil,   105,
   313,   105,   105,   105,   nil,   103,   nil,   103,   103,   103,
   313,   313,   nil,   105,   105,   236,   nil,   nil,   236,   103,
   103,    79,    70,   236,    79,   nil,   nil,   nil,   nil,    79,
   nil,   nil,   nil,   nil,   nil,    70,   nil,    70,   nil,   nil,
   236,    70,   236,   236,   236,   nil,    79,   nil,    79,    79,
    79,    70,    70,   nil,   236,   236,   nil,   nil,   nil,    98,
    79,    79,    98,    98,   nil,   230,    85,    98,   230,   230,
   nil,   nil,   nil,   230,   nil,   nil,   nil,   nil,   nil,    85,
   nil,    85,   nil,   nil,    98,    85,    98,    98,    98,   nil,
   230,   nil,   230,   230,   230,    85,    85,   nil,    98,    98,
   228,   nil,   nil,   228,   230,   230,   226,   nil,   228,   226,
   nil,   nil,   182,   nil,   226,   182,   182,   182,   182,   182,
   182,   nil,   nil,   nil,   nil,   228,   nil,   228,   228,   228,
   nil,   226,   nil,   226,   226,   226,   nil,   nil,   nil,   228,
   228,    95,   nil,   nil,    95,   226,   226,    87,   nil,    95,
    87,   nil,   nil,   183,   nil,    87,   183,   183,   183,   183,
   183,   183,   nil,   nil,   nil,   nil,    95,   nil,    95,    95,
    95,   nil,    87,   nil,    87,    87,    87,   nil,   nil,   nil,
    95,    95,    88,   nil,   nil,    88,    87,    87,   365,   nil,
    88,   365,   nil,   nil,   181,   nil,   365,   181,   181,   181,
   181,   181,   181,   nil,   nil,   nil,   nil,    88,   nil,    88,
    88,    88,   nil,   365,   nil,   365,   365,   365,   nil,   nil,
   nil,    88,    88,    90,   nil,   nil,    90,   365,   365,    91,
   nil,    90,    91,   nil,   nil,   185,   nil,    91,   185,   185,
   185,   185,   185,   185,   nil,   nil,   nil,   nil,    90,   nil,
    90,    90,    90,   nil,    91,   nil,    91,    91,    91,   nil,
   nil,   nil,    90,    90,   nil,   nil,   nil,   162,    91,    91,
   162,   162,   162,   162,   162,   162,   162,   162,   162,   162,
   162,   162,   162,   162,   162,   162,   162,   184,   nil,   nil,
   184,   184,   184,   184,   184,   184,   nil,   nil,   nil,   nil,
   nil,   nil,   198,   nil,   162,   198,   198,   198,   198,   198,
   198,   198,   198,   198,   198,   198,   198,   198,   198,   198,
   198,   198,   nil,   nil,   nil,   130,   nil,   198,   130,   130,
   130,   130,   130,   130,   130,   130,   130,   130,   130,   130,
   130,   130,   130,   130,   130,   nil,   nil,   nil,   325,   nil,
   130,   325,   325,   325,   325,   325,   325,   325,   325,   325,
   325,   325,   325,   325,   325,   325,   325,   325,   nil,   nil,
   nil,   154,   nil,   325,   154,   154,   154,   154,   154,   154,
   154,   154,   154,   154,   154,   154,   154,   154,   154,   154,
   154,   208,   nil,   nil,   208,   208,   208,   208,   208,   208,
   208,   208,   208,   208,   208,   208,   208,   208,   208,   208,
   208,   265,   265,   nil,   265,   265,   265,   265,   265,   265,
   265,   265,   265,   265,   265,   265,   265,   265,   265,   265,
   265,   168,   nil,   nil,   168,   168,   168,   168,   168,   168,
   168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
   168,    51,   nil,   nil,    51,    51,    51,    51,    51,    51,
    51,    51,    51,    51,    51,    51,    51,    51,    51,    51,
    51,   177,   nil,   nil,   177,   177,   177,   177,   177,   177,
   177,   177,   177,   177,   177,   177,   177,   177,   177,   177,
   178,   nil,   nil,   178,   178,   178,   178,   178,   178,   178,
   178,   178,   178,   178,   178,   178,   178,   178,   179,   nil,
   nil,   179,   179,   179,   179,   179,   179,   179,   179,   179,
   179,   179,   179,   179,   179,   180,   nil,   nil,   180,   180,
   180,   180,   180,   180,   180,   180,   180,   180,   180,   180,
   180,   187,   nil,   nil,   187,   187,   187,   187,   187,   187 ]

racc_action_pointer = [
   138,   519,   nil,   221,   376,     5,   364,   727,   681,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   757,   443,   471,   542,
   539,   537,   533,   514,   nil,   556,   nil,   nil,   nil,   510,
   508,   450,   nil,   nil,   nil,   156,   nil,   nil,   459,   450,
   463,   446,    38,   nil,   455,   447,   420,   436,   423,   437,
   390,  1326,   nil,   nil,   nil,   nil,   nil,   232,   645,   nil,
   397,   386,   159,   nil,   nil,   nil,   189,   nil,   nil,   nil,
   886,   407,   360,   nil,   354,   311,   292,   288,   304,   897,
   289,   288,   283,   nil,   278,   930,   nil,  1023,  1058,   258,
  1099,  1105,   320,   232,   215,  1017,   224,   223,   935,   nil,
   200,   nil,   199,   856,   nil,   850,   243,   215,   809,   774,
   768,   733,   692,   686,   651,   604,   569,   563,   528,   478,
   443,   396,   361,   355,   610,   314,   235,   320,   279,   273,
  1200,   209,   nil,   nil,   nil,   192,   212,   nil,   192,   533,
   194,   238,   nil,   168,   nil,   167,   nil,   180,    87,   142,
   142,   121,   nil,   nil,  1246,    41,    40,    61,    -5,   107,
    -9,   nil,  1142,    35,   164,    84,   550,   110,  1306,   139,
   nil,   nil,   nil,   140,   178,   nil,   nil,  1346,  1365,  1383,
  1400,  1069,   987,  1028,  1162,  1110,   533,  1416,   615,   361,
    81,   251,   254,   257,   238,    -5,   243,   nil,  1177,   nil,
   247,   nil,   nil,   nil,   273,   246,   nil,   nil,  1266,   244,
   nil,   254,   nil,   266,   278,   271,   nil,   nil,   272,   274,
   nil,   nil,   nil,   nil,   nil,   nil,   982,   nil,   976,   284,
   941,   103,   280,   nil,   301,   nil,   891,   nil,   nil,   296,
   308,   558,   502,   nil,   815,   296,   341,   321,   308,   101,
   763,   365,   366,   nil,   371,   nil,   372,   -40,   nil,   359,
   350,   -17,   386,   323,   411,  1286,    -8,   406,   nil,   nil,
   nil,   385,   722,   nil,   nil,   nil,   nil,   nil,   412,   406,
   nil,   421,   131,   nil,   423,   nil,   424,   403,   405,   522,
   nil,   484,   nil,   nil,    -4,   451,   455,   282,   439,   nil,
   nil,   437,   402,   nil,   nil,    84,   nil,   nil,   nil,   nil,
   428,   427,   640,   845,   442,   444,   nil,   nil,   nil,    15,
   nil,   nil,   446,   nil,   nil,  1223,   474,   nil,   nil,   496,
   nil,   nil,   198,   510,   499,   nil,   nil,   nil,   nil,   599,
   nil,   110,   507,   105,   538,   505,   529,   nil,   184,   553,
   nil,   nil,   nil,   nil,   nil,   554,   513,   405,   nil,    83,
   nil,   nil,   540,   nil,   nil,  1064,   nil,   133,   nil ]

racc_action_default = [
  -131,  -191,    -1,  -191,  -191,  -118,  -191,  -191,   -36,  -124,
  -125,  -126,  -127,  -128,  -129,  -130,  -131,   -73,   -73,   -73,
   -73,   -73,   -73,   -73,  -190,  -191,    -2,    -3,    -8,    -9,
  -191,  -169,  -179,    -4,  -119,  -191,    -5,   -11,   -73,   -73,
  -191,  -191,   -73,   -92,  -191,   -14,  -191,  -191,  -191,  -107,
  -104,    -6,   -16,   -17,   -18,   -19,   -20,  -191,  -191,   -60,
   -62,  -191,  -191,    -7,   -22,   -23,   -30,   -25,   -26,   -27,
   -36,  -191,  -191,  -132,  -191,   -73,  -134,  -141,  -191,  -191,
  -191,  -191,  -191,   369,  -191,   -36,  -166,  -191,  -191,  -191,
  -191,  -191,  -191,   -12,  -191,  -191,  -191,  -191,  -191,   -15,
  -191,   -95,  -191,  -191,  -103,  -191,  -107,  -191,  -191,  -191,
  -191,  -191,  -191,  -191,  -191,  -191,  -191,  -191,  -191,  -191,
  -191,  -191,  -191,  -191,  -191,  -191,   -55,   -56,   -68,  -191,
  -191,   -36,   -70,   -71,   -24,   -30,   -30,   -33,  -191,   -36,
  -191,   -84,   -74,  -191,  -135,  -191,  -142,   -36,  -191,  -191,
   -36,   -36,   -10,  -165,  -170,  -191,  -191,  -191,  -191,  -191,
  -191,   -88,   -66,  -191,   -12,  -191,  -191,  -191,  -109,  -191,
  -110,   -94,   -96,  -191,  -191,  -108,  -105,   -38,   -39,   -40,
   -41,   -42,   -43,   -44,   -45,   -46,   -47,   -48,   -49,   -50,
   -51,   -52,   -53,   -54,   -18,  -191,  -191,   -69,  -191,   -65,
  -191,   -31,   -32,   -28,  -191,   -34,   -37,   -21,   -80,  -191,
   -81,   -82,   -85,  -136,  -144,  -191,  -163,  -164,  -191,  -191,
  -184,  -185,  -186,   -86,   -87,   -13,  -191,   -89,   -68,  -191,
  -113,  -116,  -191,  -106,  -191,   -57,  -191,   -61,   -63,  -191,
  -180,   -36,   -36,   -72,  -191,  -138,  -136,  -191,  -151,  -149,
   -36,  -182,  -182,   -67,  -191,   -98,  -191,  -111,  -114,  -191,
  -191,  -116,  -100,  -120,  -191,  -191,   -78,  -191,   -29,   -35,
   -83,  -191,   -36,  -137,  -140,  -143,  -152,  -145,  -191,  -147,
  -150,  -191,  -156,  -160,  -191,  -183,  -191,  -191,  -191,  -191,
   -93,  -191,  -117,   -99,  -191,   -11,  -191,  -120,  -191,   -59,
   -58,  -191,  -191,   -76,   -77,   -78,  -181,  -133,  -139,  -146,
  -141,  -191,   -36,   -36,  -172,  -172,   -90,   -91,  -112,  -191,
  -101,  -102,  -120,  -122,  -123,  -191,  -191,   -79,  -148,  -191,
  -157,  -158,  -118,  -191,  -191,  -115,  -121,   -64,   -75,   -36,
  -171,  -187,  -191,  -187,  -182,  -167,  -177,  -189,    -9,  -191,
  -154,  -155,  -174,  -175,  -188,  -191,  -167,  -120,  -178,  -191,
  -173,  -168,  -191,  -153,  -161,  -191,  -176,  -191,  -162 ]

racc_goto_table = [
    51,    63,   214,    94,   163,   298,   239,   280,    99,   262,
   102,   258,   245,    24,   174,   301,   212,   137,   204,   135,
   196,    76,    77,    78,    79,    80,    81,    82,   303,    73,
   283,   284,   286,   104,   195,    49,   290,   200,   248,   323,
   332,   334,    91,    92,   131,   273,    96,   259,   140,   347,
   126,   127,   156,   215,   327,   130,   218,   219,   176,   166,
   152,   358,   293,   138,   336,   260,   100,   303,   328,    93,
   318,   320,   148,   306,    93,    66,    93,   292,   153,   142,
   154,   155,   143,   157,   158,   159,   137,   137,   135,   135,
   175,   168,   330,   331,    36,   260,   168,   201,   202,   362,
   271,   177,   178,   179,   180,   181,   182,   183,   184,   185,
   186,   187,   188,   189,   190,   191,   192,   193,    93,   270,
   254,   269,   198,   225,   355,   164,   167,   357,   356,   145,
    33,   342,   205,   136,   208,   253,    49,    66,   361,   356,
   352,   141,   354,   247,   209,   147,   169,   275,   150,   151,
   277,   173,    66,    27,   281,   349,   363,    26,   149,    86,
   165,     2,   256,   340,   321,   353,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    93,
   nil,   nil,   nil,   nil,   nil,   nil,   350,   nil,   nil,   nil,
   nil,   nil,   136,   136,   nil,   nil,    66,   nil,   nil,   nil,
   213,   326,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   168,   nil,   nil,   nil,   nil,   nil,   265,
   nil,   nil,   nil,   nil,   268,   205,   nil,   208,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   255,   nil,
   nil,   nil,   nil,   nil,   nil,   308,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   246,   nil,   168,   nil,   319,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    49,   nil,   325,   nil,   nil,   nil,   nil,   137,
   nil,   135,   nil,   nil,   nil,   nil,   nil,   309,    66,    66,
   nil,   nil,   nil,   246,   nil,   nil,   nil,    66,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   nil,
   296,   nil,   351,   nil,   nil,   nil,   nil,   nil,   nil,    66,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    49,   nil,   nil,   nil,   nil,   nil,   nil,   367,   nil,
   nil,   nil,   nil,   nil,   296,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    66,
    66,   nil,   nil,   nil,   nil,   nil,    49,   nil,   nil,   296,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   348,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   136,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   296 ]

racc_goto_check = [
     7,     8,    61,    12,    22,    48,    25,    67,    12,    40,
    12,    45,    58,    56,    22,    26,    33,    18,    21,    17,
    23,    29,    29,    29,    29,    29,    29,    29,    27,    56,
    71,    75,    75,    43,    22,    11,    40,    20,    63,    48,
    76,    76,    29,    29,    24,    58,    29,    39,    10,    80,
     7,     7,    12,    20,    26,     7,    20,    20,    34,    12,
    10,    80,    41,     8,    48,    47,    13,    27,    67,    11,
    45,    40,     7,    25,    11,     9,    11,    39,     8,    29,
     7,     7,    57,     7,     7,     7,    18,    18,    17,    17,
    43,     7,    71,    71,     6,    47,     7,    19,    19,    48,
    59,     7,     7,     7,     7,     7,     7,     7,     7,     7,
     7,     7,     7,     7,     7,     7,     7,     7,    11,    33,
    23,    21,     7,    12,    75,    11,    11,    74,    53,    60,
     5,    78,     8,     9,     7,    22,    11,     9,    74,    53,
    78,     9,    78,    62,    28,     9,    38,    64,     9,     9,
    65,    38,     9,     4,    68,    69,    70,     3,    72,    73,
    35,     2,    36,    77,    37,    79,     1,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,
   nil,   nil,   nil,   nil,   nil,   nil,    61,   nil,   nil,   nil,
   nil,   nil,     9,     9,   nil,   nil,     9,   nil,   nil,   nil,
     9,    22,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,     7,   nil,   nil,   nil,   nil,   nil,     7,
   nil,   nil,   nil,   nil,     8,     8,   nil,     7,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    11,   nil,
   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
     9,   nil,     7,   nil,     7,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    11,   nil,     7,   nil,   nil,   nil,   nil,    18,
   nil,    17,   nil,   nil,   nil,   nil,   nil,    11,     9,     9,
   nil,   nil,   nil,     9,   nil,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    11,   nil,   nil,   nil,
     9,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    11,   nil,   nil,   nil,   nil,   nil,   nil,     7,   nil,
   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     9,
     9,   nil,   nil,   nil,   nil,   nil,    11,   nil,   nil,     9,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,     9,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,     9 ]

racc_goto_pointer = [
   nil,   166,   161,   154,   149,   125,    88,    -7,    -7,    67,
   -24,    29,   -37,    21,   nil,   nil,   nil,   -47,   -49,   -38,
   -94,  -121,   -91,  -108,   -18,  -194,  -251,  -238,     3,     4,
   nil,   nil,   nil,  -125,   -49,    64,   -68,  -130,    48,  -184,
  -223,  -200,   nil,   -16,   nil,  -219,   nil,  -166,  -258,   nil,
   nil,   nil,   nil,  -217,   nil,   nil,    13,     6,  -201,  -145,
    52,  -143,   -71,  -176,  -101,   -99,   nil,  -242,   -96,  -184,
  -203,  -220,    78,   128,  -218,  -220,  -274,  -169,  -201,  -177,
  -285 ]

racc_goto_default = [
   nil,   nil,   nil,    16,   240,   343,   297,   162,   282,    29,
    30,    60,   nil,   nil,    59,    52,   210,    64,    65,   134,
    71,   nil,   197,   nil,   nil,   285,   nil,    75,   nil,   nil,
   304,   305,   211,   nil,    41,   nil,   nil,    43,   257,   nil,
   nil,   nil,    50,   nil,   106,   nil,   261,    35,   nil,     9,
    10,    11,    12,    13,    14,    15,   nil,   nil,   nil,   nil,
   278,    31,   nil,   nil,   nil,   nil,   279,   nil,   nil,   nil,
   nil,   nil,    32,   nil,   nil,   nil,   nil,   nil,   nil,   346,
   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 80, :_reduce_none,
  2, 80, :_reduce_2,
  2, 80, :_reduce_3,
  2, 80, :_reduce_4,
  2, 80, :_reduce_5,
  2, 80, :_reduce_6,
  2, 80, :_reduce_7,
  1, 88, :_reduce_8,
  1, 89, :_reduce_9,
  3, 89, :_reduce_10,
  1, 90, :_reduce_11,
  1, 91, :_reduce_12,
  3, 91, :_reduce_13,
  0, 92, :_reduce_14,
  1, 92, :_reduce_none,
  1, 93, :_reduce_16,
  1, 93, :_reduce_17,
  1, 93, :_reduce_18,
  1, 94, :_reduce_19,
  1, 94, :_reduce_20,
  1, 95, :_reduce_none,
  1, 87, :_reduce_none,
  1, 87, :_reduce_none,
  2, 87, :_reduce_24,
  1, 96, :_reduce_25,
  1, 96, :_reduce_26,
  1, 96, :_reduce_27,
  3, 96, :_reduce_28,
  5, 97, :_reduce_29,
  0, 98, :_reduce_30,
  2, 98, :_reduce_31,
  2, 98, :_reduce_32,
  1, 98, :_reduce_33,
  1, 100, :_reduce_34,
  3, 100, :_reduce_35,
  0, 99, :_reduce_36,
  3, 99, :_reduce_37,
  3, 86, :_reduce_38,
  3, 86, :_reduce_39,
  3, 86, :_reduce_40,
  3, 86, :_reduce_41,
  3, 86, :_reduce_42,
  3, 86, :_reduce_43,
  3, 86, :_reduce_44,
  3, 86, :_reduce_45,
  3, 86, :_reduce_46,
  3, 86, :_reduce_47,
  3, 86, :_reduce_48,
  3, 86, :_reduce_49,
  3, 86, :_reduce_50,
  3, 86, :_reduce_51,
  3, 86, :_reduce_52,
  3, 86, :_reduce_53,
  3, 86, :_reduce_54,
  2, 86, :_reduce_55,
  2, 86, :_reduce_56,
  4, 86, :_reduce_57,
  6, 86, :_reduce_58,
  6, 86, :_reduce_59,
  1, 86, :_reduce_none,
  4, 86, :_reduce_61,
  1, 86, :_reduce_62,
  4, 86, :_reduce_63,
  8, 86, :_reduce_64,
  3, 86, :_reduce_65,
  1, 101, :_reduce_66,
  3, 101, :_reduce_67,
  0, 102, :_reduce_68,
  1, 102, :_reduce_none,
  1, 103, :_reduce_none,
  1, 103, :_reduce_none,
  4, 106, :_reduce_72,
  0, 108, :_reduce_73,
  2, 108, :_reduce_74,
  3, 109, :_reduce_75,
  1, 110, :_reduce_none,
  1, 110, :_reduce_none,
  0, 105, :_reduce_78,
  2, 105, :_reduce_79,
  1, 111, :_reduce_none,
  1, 111, :_reduce_none,
  1, 112, :_reduce_82,
  3, 112, :_reduce_83,
  0, 107, :_reduce_84,
  1, 107, :_reduce_none,
  4, 85, :_reduce_86,
  4, 85, :_reduce_87,
  3, 85, :_reduce_88,
  4, 85, :_reduce_89,
  7, 85, :_reduce_90,
  7, 85, :_reduce_91,
  1, 85, :_reduce_none,
  6, 85, :_reduce_93,
  3, 85, :_reduce_94,
  2, 85, :_reduce_95,
  3, 85, :_reduce_96,
  1, 114, :_reduce_97,
  3, 114, :_reduce_98,
  6, 116, :_reduce_99,
  0, 120, :_reduce_100,
  2, 120, :_reduce_101,
  2, 120, :_reduce_102,
  2, 121, :_reduce_103,
  1, 113, :_reduce_104,
  3, 113, :_reduce_105,
  3, 123, :_reduce_106,
  0, 122, :_reduce_107,
  2, 122, :_reduce_108,
  1, 117, :_reduce_none,
  1, 117, :_reduce_110,
  1, 124, :_reduce_111,
  3, 124, :_reduce_112,
  0, 115, :_reduce_113,
  1, 115, :_reduce_none,
  4, 125, :_reduce_115,
  0, 118, :_reduce_116,
  2, 118, :_reduce_117,
  0, 126, :_reduce_118,
  1, 126, :_reduce_119,
  0, 127, :_reduce_120,
  3, 127, :_reduce_121,
  2, 127, :_reduce_122,
  3, 119, :_reduce_123,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  1, 82, :_reduce_none,
  0, 135, :_reduce_131,
  2, 135, :_reduce_132,
  7, 128, :_reduce_133,
  0, 136, :_reduce_134,
  1, 136, :_reduce_135,
  0, 137, :_reduce_136,
  2, 137, :_reduce_137,
  0, 138, :_reduce_138,
  2, 138, :_reduce_139,
  6, 129, :_reduce_140,
  0, 139, :_reduce_141,
  1, 139, :_reduce_142,
  2, 141, :_reduce_143,
  0, 142, :_reduce_144,
  2, 142, :_reduce_145,
  2, 145, :_reduce_146,
  1, 146, :_reduce_147,
  3, 146, :_reduce_148,
  0, 144, :_reduce_149,
  1, 144, :_reduce_none,
  0, 143, :_reduce_151,
  1, 143, :_reduce_152,
  12, 130, :_reduce_153,
  1, 148, :_reduce_154,
  1, 148, :_reduce_155,
  1, 150, :_reduce_156,
  3, 150, :_reduce_157,
  3, 150, :_reduce_158,
  0, 147, :_reduce_159,
  1, 147, :_reduce_160,
  1, 149, :_reduce_161,
  3, 149, :_reduce_162,
  4, 131, :_reduce_163,
  4, 132, :_reduce_164,
  3, 140, :_reduce_165,
  2, 151, :_reduce_166,
  0, 153, :_reduce_167,
  2, 153, :_reduce_168,
  0, 152, :_reduce_169,
  2, 152, :_reduce_170,
  9, 133, :_reduce_171,
  0, 155, :_reduce_172,
  4, 155, :_reduce_173,
  2, 156, :_reduce_174,
  2, 156, :_reduce_175,
  4, 158, :_reduce_176,
  1, 159, :_reduce_177,
  2, 159, :_reduce_178,
  1, 83, :_reduce_179,
  1, 104, :_reduce_180,
  3, 104, :_reduce_181,
  0, 154, :_reduce_182,
  1, 154, :_reduce_none,
  4, 84, :_reduce_184,
  4, 84, :_reduce_185,
  4, 84, :_reduce_186,
  0, 157, :_reduce_187,
  2, 157, :_reduce_188,
  9, 134, :_reduce_189,
  1, 81, :_reduce_190 ]

racc_reduce_n = 191

racc_shift_n = 369

racc_token_table = {
  false => 0,
  :error => 1,
  "forall" => 2,
  "exists" => 3,
  "old" => 4,
  "[" => 5,
  "]" => 6,
  "!" => 7,
  "*" => 8,
  "/" => 9,
  "%" => 10,
  "+" => 11,
  "-" => 12,
  "++" => 13,
  "==" => 14,
  "!=" => 15,
  "<" => 16,
  ">" => 17,
  "<=" => 18,
  ">=" => 19,
  "<:" => 20,
  "&&" => 21,
  "||" => 22,
  "==>" => 23,
  "<==>" => 24,
  "if" => 25,
  "then" => 26,
  "else" => 27,
  ":" => 28,
  "(" => 29,
  ")" => 30,
  :IDENTIFIER => 31,
  :NUMBER => 32,
  :BITVECTOR => 33,
  :STRING => 34,
  :BVTYPE => 35,
  :PARSE_DECL => 36,
  :PARSE_PARAM => 37,
  :PARSE_SPEC => 38,
  :PARSE_STMT => 39,
  :PARSE_EXPR => 40,
  :PARSE_TYPE => 41,
  "," => 42,
  "true" => 43,
  "false" => 44,
  "bool" => 45,
  "int" => 46,
  ":=" => 47,
  "::" => 48,
  "{:" => 49,
  "}" => 50,
  "{" => 51,
  "assert" => 52,
  ";" => 53,
  "assume" => 54,
  "havoc" => 55,
  "call" => 56,
  "while" => 57,
  "break" => 58,
  "return" => 59,
  "goto" => 60,
  "invariant" => 61,
  "free" => 62,
  "type" => 63,
  "finite" => 64,
  "=" => 65,
  "const" => 66,
  "unique" => 67,
  "complete" => 68,
  "function" => 69,
  "returns" => 70,
  "axiom" => 71,
  "var" => 72,
  "where" => 73,
  "procedure" => 74,
  "requires" => 75,
  "modifies" => 76,
  "ensures" => 77,
  "implementation" => 78 }

racc_nt_base = 79

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"forall\"",
  "\"exists\"",
  "\"old\"",
  "\"[\"",
  "\"]\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"++\"",
  "\"==\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"<:\"",
  "\"&&\"",
  "\"||\"",
  "\"==>\"",
  "\"<==>\"",
  "\"if\"",
  "\"then\"",
  "\"else\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "IDENTIFIER",
  "NUMBER",
  "BITVECTOR",
  "STRING",
  "BVTYPE",
  "PARSE_DECL",
  "PARSE_PARAM",
  "PARSE_SPEC",
  "PARSE_STMT",
  "PARSE_EXPR",
  "PARSE_TYPE",
  "\",\"",
  "\"true\"",
  "\"false\"",
  "\"bool\"",
  "\"int\"",
  "\":=\"",
  "\"::\"",
  "\"{:\"",
  "\"}\"",
  "\"{\"",
  "\"assert\"",
  "\";\"",
  "\"assume\"",
  "\"havoc\"",
  "\"call\"",
  "\"while\"",
  "\"break\"",
  "\"return\"",
  "\"goto\"",
  "\"invariant\"",
  "\"free\"",
  "\"type\"",
  "\"finite\"",
  "\"=\"",
  "\"const\"",
  "\"unique\"",
  "\"complete\"",
  "\"function\"",
  "\"returns\"",
  "\"axiom\"",
  "\"var\"",
  "\"where\"",
  "\"procedure\"",
  "\"requires\"",
  "\"modifies\"",
  "\"ensures\"",
  "\"implementation\"",
  "$start",
  "target",
  "program",
  "decl",
  "param_decl",
  "spec",
  "stmt",
  "expr",
  "type",
  "name",
  "names",
  "ident",
  "idents",
  "idents_opt",
  "literal",
  "bool_lit",
  "string",
  "type_atom",
  "map_type",
  "tc_args",
  "type_args",
  "types",
  "exprs",
  "exprs_opt",
  "quantifier",
  "param_decls",
  "ants",
  "attr",
  "enss_opt",
  "attrs",
  "trigger",
  "ant",
  "ens",
  "enss",
  "lhss",
  "call_lhs",
  "wc_exprs_opt",
  "if_stmt",
  "wc_expr",
  "loop_invs",
  "block",
  "else_stmt",
  "lhs",
  "selects",
  "select",
  "wc_exprs",
  "loop_inv",
  "free_opt",
  "lstmts",
  "type_decl",
  "const_decl",
  "func_decl",
  "axiom_decl",
  "var_decl",
  "proc_decl",
  "impl_decl",
  "decls",
  "finite_opt",
  "tc_params",
  "type_syn",
  "unique_opt",
  "typed_ids",
  "order_spec",
  "parent_info",
  "complete_opt",
  "parent_edges_opt",
  "parent_edge",
  "parent_edges",
  "fargs_opt",
  "farg",
  "fbody",
  "fargs",
  "typed_ids_where",
  "where_clause",
  "var_decls",
  "param_decls_opt",
  "out_params",
  "pspec",
  "specs",
  "pbody",
  "pbodies" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_2(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_3(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_4(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_6(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_7(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 35)
  def _reduce_8(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_9(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_10(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 38)
  def _reduce_11(val, _values)
     Identifier.new name: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_12(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_13(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_14(val, _values)
     [] 
  end
.,.,

# reduce 15 omitted

module_eval(<<'.,.,', 'parser.racc', 43)
  def _reduce_16(val, _values)
     BooleanLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_17(val, _values)
     BitvectorLiteral.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_18(val, _values)
     IntegerLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_19(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_20(val, _values)
     false 
  end
.,.,

# reduce 21 omitted

# reduce 22 omitted

# reduce 23 omitted

module_eval(<<'.,.,', 'parser.racc', 53)
  def _reduce_24(val, _values)
     CustomType.new name: val[0], arguments: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 56)
  def _reduce_25(val, _values)
     Type::Boolean 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_26(val, _values)
     Type::Integer 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_27(val, _values)
     BitvectorType.new width: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_28(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 62)
  def _reduce_29(val, _values)
        MapType.new arguments: val[0], domain: val[2], range: val[4]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 66)
  def _reduce_30(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_31(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_32(val, _values)
     [(CustomType.new name: val[0], arguments: val[1])] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_33(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_34(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 71)
  def _reduce_35(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_36(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 73)
  def _reduce_37(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 75)
  def _reduce_38(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_39(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_40(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_41(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_42(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_43(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_44(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_45(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_46(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_47(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_48(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_49(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_50(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_51(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_52(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_53(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_54(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_55(val, _values)
     LogicalNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_56(val, _values)
     ArithmeticNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_57(val, _values)
     MapSelect.new map: val[0], indexes: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_58(val, _values)
     MapUpdate.new map: val[0], indexes: val[2], value: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_59(val, _values)
     BitvectorExtract.new bitvector: val[0], msb: val[2], lsb: val[4] 
  end
.,.,

# reduce 60 omitted

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_61(val, _values)
            val[0].kind = :function
        FunctionApplication.new function: val[0], arguments: val[2]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 102)
  def _reduce_62(val, _values)
     val[0].kind = :storage; val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 103)
  def _reduce_63(val, _values)
     OldExpression.new expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 105)
  def _reduce_64(val, _values)
            QuantifiedExpression.new quantifier: val[1], type_arguments: val[2], 
          variables: val[3], 
          attributes: val[5].select{|a| a.is_a?(Hash)},
          triggers: val[5].select{|es| es.is_a?(Array)}.map{|es| Trigger.new(expressions: es)},
          expression: val[6] 
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 111)
  def _reduce_65(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_66(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 113)
  def _reduce_67(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 114)
  def _reduce_68(val, _values)
     [] 
  end
.,.,

# reduce 69 omitted

# reduce 70 omitted

# reduce 71 omitted

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_72(val, _values)
     {val[1].to_sym => val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_73(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_74(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 120)
  def _reduce_75(val, _values)
     val[1] 
  end
.,.,

# reduce 76 omitted

# reduce 77 omitted

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_78(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 122)
  def _reduce_79(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 80 omitted

# reduce 81 omitted

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_82(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_83(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 126)
  def _reduce_84(val, _values)
     [] 
  end
.,.,

# reduce 85 omitted

module_eval(<<'.,.,', 'parser.racc', 129)
  def _reduce_86(val, _values)
     AssertStatement.new attributes: val[1], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_87(val, _values)
     AssumeStatement.new attributes: val[1], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_88(val, _values)
     val[1].each{|id| id.kind = :storage}; HavocStatement.new identifiers: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 132)
  def _reduce_89(val, _values)
     AssignStatement.new lhs: val[0], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_90(val, _values)
          CallStatement.new attributes: val[1], assignments: val[2][:rets], 
      procedure: val[2][:name], arguments: val[4]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 138)
  def _reduce_91(val, _values)
          val[2].kind = :procedure
      CallStatement.new attributes: [], assignments: nil, procedure: val[2],
      arguments: val[4]
    
  end
.,.,

# reduce 92 omitted

module_eval(<<'.,.,', 'parser.racc', 144)
  def _reduce_93(val, _values)
          WhileStatement.new condition: val[2], invariants: val[4], block: val[5]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 147)
  def _reduce_94(val, _values)
          val[1].each{|id| id.kind = :label}
      BreakStatement.new identifiers: val[1]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 150)
  def _reduce_95(val, _values)
     ReturnStatement.new 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_96(val, _values)
          val[1].each{|id| id.kind = :label}
      GotoStatement.new identifiers: val[1]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 157)
  def _reduce_97(val, _values)
     val[0].kind = :procedure; {name: val[0], rets: []} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_98(val, _values)
          val[0].each{|id| id.kind = :storage}
      val[2].kind = :procedure
      {name: val[2], rets: val[0]}
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 164)
  def _reduce_99(val, _values)
     IfStatement.new condition: val[2], block: val[4], else: val[5] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_100(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_101(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 165)
  def _reduce_102(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_103(val, _values)
     val[0].kind = :storage; val[1].empty? ? val[0] : val[1].reduce(val[0]){|m,x| MapSelect.new map: m, indexes: x} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_104(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 168)
  def _reduce_105(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_106(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_107(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 171)
  def _reduce_108(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 109 omitted

module_eval(<<'.,.,', 'parser.racc', 173)
  def _reduce_110(val, _values)
     Expression::Wildcard 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_111(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 174)
  def _reduce_112(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 175)
  def _reduce_113(val, _values)
     [] 
  end
.,.,

# reduce 114 omitted

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_115(val, _values)
     LoopInvariant.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_116(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_117(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_118(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 179)
  def _reduce_119(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 182)
  def _reduce_120(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 183)
  def _reduce_121(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_122(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_123(val, _values)
     Block.new declarations: [], statements: val[1] 
  end
.,.,

# reduce 124 omitted

# reduce 125 omitted

# reduce 126 omitted

# reduce 127 omitted

# reduce 128 omitted

# reduce 129 omitted

# reduce 130 omitted

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_131(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 196)
  def _reduce_132(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 199)
  def _reduce_133(val, _values)
        if val[5] && val[2]
      abort "Illegal declaration of type #{([val[3]] + val[4]) * " "}"
    end
    TypeDeclaration.new attributes: val[1], finite: val[2], name: val[3],
      arguments: val[4], type: val[5] 
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_134(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_135(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_136(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 206)
  def _reduce_137(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_138(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 207)
  def _reduce_139(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 210)
  def _reduce_140(val, _values)
        ConstantDeclaration.new(val[3].merge({attributes: val[1], unique: val[2], order_spec: val[4]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_141(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 212)
  def _reduce_142(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 213)
  def _reduce_143(val, _values)
     [val[0],val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_144(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 214)
  def _reduce_145(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 215)
  def _reduce_146(val, _values)
     val[1].kind = :storage; [val[0],val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_147(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 216)
  def _reduce_148(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 217)
  def _reduce_149(val, _values)
     [] 
  end
.,.,

# reduce 150 omitted

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_151(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 218)
  def _reduce_152(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_153(val, _values)
        FunctionDeclaration.new attributes: val[1], name: val[2],
      type_arguments: val[3], arguments: val[5], return: val[9], body: val[11]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 226)
  def _reduce_154(val, _values)
     NameDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 227)
  def _reduce_155(val, _values)
     NameDeclaration.new(names: [], type: val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_156(val, _values)
     [{names: [], type: val[0]}] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_157(val, _values)
          if val[2].first[:names].empty?
        [{names: [], type: val[0]}] + val[2]
      else
        val[2].first[:names].unshift(val[0])
        val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 240)
  def _reduce_158(val, _values)
          # assert val[2].first[:names].empty?

      unless val[0].respond_to?(:name)
        raise ParseError, "parse error on value #{val[0]}: expecting name."
      end
      
      if val[2].first[:names].empty?
        val[2].first[:names].unshift(val[0])
        val[2]
      else
        [{names: [val[0]], type: val[2].first[:names].shift}] + val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_159(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 256)
  def _reduce_160(val, _values)
          val[0].map do |x|
        x[:names].map!{|t| t.name}
        NameDeclaration.new(x)
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_161(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 261)
  def _reduce_162(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 264)
  def _reduce_163(val, _values)
        AxiomDeclaration.new attributes: val[1], expression: val[2]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_164(val, _values)
        VariableDeclaration.new(val[2].merge({attributes: val[1]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 270)
  def _reduce_165(val, _values)
     {names: val[0], type: val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 271)
  def _reduce_166(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_167(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 272)
  def _reduce_168(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_169(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 273)
  def _reduce_170(val, _values)
     {where: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 277)
  def _reduce_171(val, _values)
          ProcedureDeclaration.new attributes: val[1], name: val[2], 
        type_arguments: val[3], parameters: val[5], returns: val[7], 
        specifications: val[8][:specs], body: val[8][:body]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_172(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 281)
  def _reduce_173(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_174(val, _values)
     {specs: val[1], body: nil} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_175(val, _values)
     {specs: val[0], body: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 283)
  def _reduce_176(val, _values)
     Block.new declarations: val[1], statements: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_177(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_178(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 286)
  def _reduce_179(val, _values)
     NameDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_180(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 287)
  def _reduce_181(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 288)
  def _reduce_182(val, _values)
     [] 
  end
.,.,

# reduce 183 omitted

module_eval(<<'.,.,', 'parser.racc', 291)
  def _reduce_184(val, _values)
     RequiresClause.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 293)
  def _reduce_185(val, _values)
          val[2].each{|id| id.kind = :storage}
      ModifiesClause.new free: val[0], identifiers: val[2]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_186(val, _values)
     EnsuresClause.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_187(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 297)
  def _reduce_188(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_189(val, _values)
          ImplementationDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        body: val[8]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 306)
  def _reduce_190(val, _values)
     Program.new declarations: val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class BoogieLanguage


