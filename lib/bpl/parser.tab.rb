#
# DO NOT MODIFY!!!!
# This file is automatically generated by Racc 1.4.12
# from Racc grammer file "".
#

require 'racc/parser.rb'

require_relative 'lexer.rex'
require_relative 'ast/token'
require_relative 'ast/program'
require_relative 'ast/declaration'
require_relative 'ast/specification'
require_relative 'ast/statement'
require_relative 'ast/expression'
require_relative 'ast/type'
include Bpl::AST

class BoogieLanguage < Racc::Parser

module_eval(<<'...end parser.racc/module_eval...', 'parser.racc', 348)
def parse(input)
  scan_str(input)
end

def parse_special(str, kind)
  scan_setup("$$PARSE_#{kind.upcase}$$ " + str)
  do_parse
end

def parse_decl(str) parse_special(str, :decl) end
def parse_param(str) parse_special(str, :param) end
def parse_spec(str) parse_special(str, :spec) end
def parse_blocks(str) parse_special(str, :blocks) end
def parse_block(str) parse_special(str, :blocks).first end
def parse_stmt(str) parse_special(str, :stmt) end
def parse_expr(str) parse_special(str, :expr) end
def parse_type(str) parse_special(str, :type) end

def parse_str(str)
  case str
  when /\b(type|const|function|axiom|var|procedure|implementation)\b/
    parse_decl(str)
  when /\b(requires|ensures|modifies|invariant)\b/
    parse_spec(str)
  when /\A\s*#{Bpl::IDENTIFIER}:.*;.*\s+#{Bpl::IDENTIFIER}:/m
    parse_blocks(str)
  when /\A\s*#{Bpl::IDENTIFIER}:.*;/m
    parse_block(str)
  when /\b(assert|assume|havoc|call|if|while|break|goto|return)\b|:=/
    parse_stmt(str)
  when /[^<:]:[^:]/
    parse_param(str)
  else
    parse_expr(str)
  end
end

...end parser.racc/module_eval...
##### State transition tables begin ###

racc_action_table = [
    68,   104,   254,    62,  -147,    49,   -37,    79,    63,   332,
   186,   380,  -190,   379,   359,    55,    81,    79,   321,    90,
    77,    64,    29,    35,   331,    69,    76,    55,    59,    58,
    77,   246,    29,   364,  -124,    35,    76,    74,    75,    91,
    60,    61,   159,   247,   255,    65,   248,    74,    75,   135,
    81,   109,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
  -124,    35,   132,   133,   134,   130,   131,   129,   122,   123,
   124,   125,   126,   127,   128,   121,   120,   119,   118,   135,
   249,   135,   132,   133,   134,   130,   131,   135,   250,   243,
   132,   133,   134,   130,   131,   129,   122,   123,   124,   125,
   126,   127,   128,   121,   120,   119,   118,   135,   251,   352,
   132,   133,   134,   130,   131,   129,   122,   123,   124,   125,
   126,   127,   128,   121,   120,   119,   118,   135,   252,    81,
   132,   133,   134,    55,    81,   135,   321,   242,   132,   133,
   134,   130,   131,   129,   122,   123,   124,   125,   126,   127,
   128,   121,   120,   119,   118,   135,   102,   185,   132,   133,
   134,   130,   131,   129,   122,   123,   124,   125,   126,   127,
   128,   121,   120,   119,   118,   135,   105,   240,   132,   133,
   134,    92,   212,   135,    79,   241,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,    79,  -103,   235,    35,   145,   146,    68,
    49,    35,    62,    95,    96,    97,    38,    63,   173,  -124,
  -124,  -124,   236,    94,  -124,  -124,  -124,    79,    29,    29,
    64,   135,   135,   239,    69,   135,    55,    59,    58,    39,
   253,    40,    41,    43,    45,    46,    47,    48,    55,    60,
    61,    81,   135,    55,    65,   132,   133,   134,   130,   131,
   129,   122,   123,   124,   125,   126,   127,   128,   121,   120,
   119,   118,    22,    68,    79,   135,    62,   259,   132,   133,
   134,    63,    68,   111,    29,    62,   183,    77,   263,    29,
    63,   264,   113,    76,    64,   265,   266,    29,    69,   382,
    55,    59,    58,    64,    74,    75,   271,    69,   272,    55,
    59,    58,    68,    60,    61,    62,   273,   274,    65,    81,
    63,    68,    60,    61,    62,    81,    55,    65,    81,    63,
    79,   284,   285,    64,    81,   115,   288,    69,   289,    55,
    59,    58,    64,   290,   116,   140,    69,    81,    55,    59,
    58,    68,    60,    61,    62,   295,    29,    65,   297,    63,
    68,    60,    61,    62,   299,   141,    65,   142,    63,    29,
    29,   310,    64,   311,   312,   313,    69,   314,    55,    59,
    58,    64,   225,   152,   -37,    69,   317,    55,    59,    58,
   226,    60,    61,    55,    68,    79,    65,    62,   113,    22,
    60,    61,    63,    68,    29,    65,    62,   183,    77,   326,
    29,    63,    29,    55,    76,    64,   329,   330,    29,    69,
   333,    55,    59,    58,    64,    74,    75,   334,    69,   335,
    55,    59,    58,    68,    60,    61,    62,   336,    81,    65,
    81,    63,    68,    60,    61,    62,   184,   157,    65,    55,
    63,    35,    29,   222,    64,   159,   345,    55,    69,   159,
    55,    59,    58,    64,   349,   349,   -37,    69,   351,    55,
    59,    58,    68,    60,    61,    62,   174,    79,    65,   354,
    63,   173,    60,    61,   356,   357,    81,    65,   362,   140,
    77,   -31,    29,    64,    29,    68,    76,    69,    62,    55,
    59,    58,   226,    63,    91,    29,    29,    74,    75,   140,
    55,    29,    60,    61,    29,    29,    64,    65,    68,    49,
    69,    62,    55,    59,    58,    38,    63,   375,   376,   377,
    -9,    26,   340,   nil,   nil,    60,    61,   nil,   nil,    64,
    65,    68,   nil,    69,    62,    55,    59,    58,    39,    63,
    40,    41,    43,    45,    46,    47,    48,   nil,    60,    61,
   nil,   nil,    64,    65,    68,    49,    69,    62,    55,   209,
    58,    38,    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    60,    61,   nil,   nil,    64,    65,    68,   nil,    69,
    62,    55,    59,    58,    39,    63,    40,    41,    43,    45,
    46,    47,    48,   nil,    60,    61,   nil,   nil,    64,    65,
    68,    49,    69,    62,    55,    59,    58,    38,    63,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,    61,   nil,
   nil,    64,    65,    68,   nil,    69,    62,    55,    59,    58,
    39,    63,    40,    41,    43,    45,    46,    47,    48,   nil,
    60,    61,   nil,   nil,    64,    65,    68,    49,    69,    62,
    55,    59,    58,    38,    63,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    60,    61,   nil,   nil,    64,    65,    68,
   nil,    69,    62,    55,    59,    58,    39,    63,    40,    41,
    43,    45,    46,    47,    48,   nil,    60,    61,   nil,   nil,
    64,    65,    68,    49,    69,    62,    55,    59,    58,    38,
    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,
    61,   nil,   nil,    64,    65,    68,   nil,    69,    62,    55,
    59,    58,    39,    63,    40,    41,    43,    45,    46,    47,
    48,   nil,    60,    61,   nil,   nil,    64,    65,    68,    49,
    69,    62,    55,    59,    58,    55,    63,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,    60,    61,   nil,   nil,    64,
    65,    68,   nil,    69,    62,    55,    59,    58,    39,    63,
    40,    41,    43,    45,    46,    47,    48,   nil,    60,    61,
   nil,   nil,    64,    65,    68,    49,    69,    62,    55,    59,
    58,    38,    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    60,    61,   nil,   nil,    64,    65,    68,   nil,    69,
    62,    55,    59,    58,    39,    63,    40,    41,    43,    45,
    46,    47,    48,   nil,    60,    61,   nil,   nil,    64,    65,
    68,   nil,    69,    62,    55,    59,    58,   135,    63,   nil,
   132,   133,   134,   130,   131,   129,   nil,    60,    61,   nil,
   nil,    64,    65,    68,   nil,    69,    62,    55,    59,    58,
   135,    63,   nil,   132,   133,   134,   130,   131,   129,   nil,
    60,    61,   nil,   nil,    64,    65,    68,   nil,    69,    62,
    55,    59,    58,   135,    63,   nil,   132,   133,   134,   130,
   131,   129,   nil,    60,    61,   nil,   nil,    64,    65,    68,
   nil,    69,    62,    55,    59,    58,   135,    63,   nil,   132,
   133,   134,   130,   131,   129,   nil,    60,    61,   nil,   nil,
    64,    65,    68,   nil,    69,    62,    55,    59,    58,   135,
    63,   nil,   132,   133,   134,   130,   131,   129,   nil,    60,
    61,   nil,   nil,    64,    65,    68,   nil,    69,    62,    55,
    59,    58,   135,    63,   nil,   132,   133,   134,   130,   131,
   129,   nil,    60,    61,   nil,   nil,    64,    65,    68,   nil,
    69,    62,    55,    59,    58,   135,    63,   nil,   132,   133,
   134,   130,   131,   129,   nil,    60,    61,   nil,   nil,    64,
    65,    68,   nil,    69,    62,    55,    59,    58,   nil,    63,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,    60,    61,
   nil,   nil,    64,    65,    68,   nil,    69,    62,    55,    59,
    58,   nil,    63,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    60,    61,   nil,   nil,    64,    65,    68,   nil,    69,
    62,    55,    59,    58,   nil,    63,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,    60,    61,   nil,   nil,    64,    65,
    68,   nil,    69,    62,    55,    59,    58,   nil,    63,   nil,
   nil,   nil,   nil,   -37,   nil,   nil,   nil,    60,    61,   nil,
   nil,    64,    65,    68,    79,    69,    62,    55,    59,    58,
   nil,    63,   nil,   nil,   nil,   nil,   nil,    77,   nil,    29,
    60,    61,   nil,    76,    64,    65,   nil,   nil,    69,   nil,
    55,    59,    58,    68,    74,    75,    62,   183,   nil,   nil,
   nil,    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,
    63,   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,
    55,    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    68,    60,    61,    62,   183,   nil,    65,   nil,
    63,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
   nil,   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,
    59,    58,    64,   nil,   nil,   nil,    69,   nil,    55,    59,
    58,    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,
    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,   nil,
   nil,   nil,    64,   nil,   nil,   nil,    69,   nil,    55,    59,
    58,    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,
    68,    60,    61,    62,   nil,   nil,    65,   nil,    63,    68,
    60,    61,    62,   nil,   nil,    65,   nil,    63,   nil,   nil,
   nil,    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,
    64,   nil,   nil,   nil,    69,   nil,    55,    59,    58,    68,
    60,    61,    62,   nil,   nil,    65,    79,    63,   nil,    60,
    61,   nil,   nil,   nil,    65,   nil,   nil,   nil,   nil,    77,
    64,    29,   nil,   nil,    69,    76,    55,    59,    58,     3,
     4,     5,     6,     7,     8,     9,    74,    75,   nil,    60,
    61,   nil,   135,   nil,    65,   132,   133,   134,   130,   131,
   129,   122,   123,   124,   125,   126,   127,   128,    18,   nil,
   nil,    19,   nil,   nil,    20,   nil,    21,    22,   nil,    23,
   nil,   135,   nil,    24,   132,   133,   134,   130,   131,   129,
   122,   123,   124,   125,   126,   127,   128,   121,   120,   119,
   118,    79,   nil,   nil,   nil,   nil,   nil,   nil,    79,   nil,
   nil,    79,   nil,   nil,    77,   nil,    29,   nil,   nil,   245,
    76,    77,   nil,    29,    77,   nil,    29,    76,   nil,   nil,
    76,    74,    75,    79,   nil,   nil,    79,   nil,    74,    75,
   nil,    74,    75,    79,   nil,   nil,    77,   nil,    29,    77,
   nil,    29,    76,   nil,   nil,    76,    77,    79,    29,   nil,
   nil,   nil,    76,    74,    75,    79,    74,    75,   nil,   nil,
    77,  -165,    29,    74,    75,   nil,    76,   nil,    77,   nil,
    29,   nil,   nil,   nil,    76,   nil,   nil,    74,    75,   nil,
   nil,   nil,   nil,   nil,   135,    74,    75,   132,   133,   134,
   130,   131,   129,   122,   123,   124,   125,   126,   127,   128,
   121,   120,   119,   118,   nil,   nil,   nil,   135,   nil,   218,
   132,   133,   134,   130,   131,   129,   122,   123,   124,   125,
   126,   127,   128,   121,   120,   119,   118,   nil,   nil,   nil,
   135,   nil,   260,   132,   133,   134,   130,   131,   129,   122,
   123,   124,   125,   126,   127,   128,   121,   120,   119,   118,
   nil,   nil,   nil,   135,   nil,   355,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   287,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   211,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   318,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   118,   135,   nil,   nil,   132,   133,   134,   130,
   131,   129,   122,   123,   124,   125,   126,   127,   128,   121,
   120,   119,   135,   nil,   nil,   132,   133,   134,   130,   131,
   129,   122,   123,   124,   125,   126,   127,   128,   121,   120,
   135,   nil,   nil,   132,   133,   134,   130,   131,   129,   122,
   123,   124,   125,   126,   127,   128,   121,    18,   nil,   nil,
    19,   nil,   nil,    20,   nil,    21,    22,    18,    23,   nil,
    19,   nil,    24,    20,   nil,    21,    22,   nil,    23,   nil,
   nil,   nil,    24 ]

racc_action_check = [
    47,    43,   210,    47,   271,   354,   148,   357,    47,   305,
   110,   375,   348,   375,   348,   173,   289,   148,   289,    26,
   357,    47,   357,   348,   305,    47,   357,    47,    47,    47,
   148,   176,   148,   354,   283,   283,   148,   357,   357,    30,
    47,    47,   271,   178,   210,    47,   179,   148,   148,   172,
    43,    47,   172,   172,   172,   172,   172,   172,   172,   172,
   172,   172,   172,   172,   172,   172,   172,   172,   172,   339,
   250,   250,   339,   339,   339,   339,   339,   339,   339,   339,
   339,   339,   339,   339,   339,   339,   339,   339,   339,   203,
   180,   136,   203,   203,   203,   203,   203,   171,   182,   172,
   171,   171,   171,   171,   171,   171,   171,   171,   171,   171,
   171,   171,   171,   171,   171,   171,   171,   108,   187,   339,
   108,   108,   108,   108,   108,   108,   108,   108,   108,   108,
   108,   108,   108,   108,   108,   108,   108,   205,   188,    40,
   205,   205,   205,    41,   324,   170,   324,   171,   170,   170,
   170,   170,   170,   170,   170,   170,   170,   170,   170,   170,
   170,   170,   170,   170,   170,   161,    42,   108,   161,   161,
   161,   161,   161,   161,   161,   161,   161,   161,   161,   161,
   161,   161,   161,   161,   161,   204,    45,   169,   204,   204,
   204,    31,   139,   168,   164,   170,   168,   168,   168,   168,
   168,   168,   168,   168,   168,   168,   168,   168,   168,   168,
   168,   168,   168,   163,   177,   161,   361,    69,    69,    69,
   284,   359,    69,    36,    36,    36,   284,    69,   177,   361,
   361,   361,   162,    32,   359,   359,   359,   160,   158,   156,
    69,   206,   207,   168,    69,   208,    69,    69,    69,   284,
   209,   284,   284,   284,   284,   284,   284,   284,    46,    69,
    69,    23,   381,    48,    69,   381,   381,   381,   381,   381,
   381,   381,   381,   381,   381,   381,   381,   381,   381,   381,
   381,   381,   214,   131,    92,   137,   131,   215,   137,   137,
   137,   131,   249,    49,   219,   249,   249,    92,   223,    92,
   249,   224,    50,    92,   131,   228,   230,   232,   131,   381,
   131,   131,   131,   249,    92,    92,   233,   249,   234,   249,
   249,   249,   247,   131,   131,   247,   237,   238,   131,    22,
   247,   245,   249,   249,   245,    21,   248,   249,    20,   245,
   144,   251,   253,   247,    19,    51,   257,   247,   261,   247,
   247,   247,   245,   262,    52,    65,   245,    18,   245,   245,
   245,   211,   247,   247,   211,   267,   268,   247,   269,   211,
   266,   245,   245,   266,   270,    67,   245,    68,   266,   273,
   274,   276,   211,   278,   279,   281,   211,   282,   211,   211,
   211,   266,   153,    78,   149,   266,   285,   266,   266,   266,
   266,   211,   211,   115,   287,   149,   211,   287,   114,   140,
   266,   266,   287,   312,   290,   266,   312,   312,   149,   294,
   149,   312,    79,   301,   149,   287,   302,   304,    81,   287,
   307,   287,   287,   287,   312,   149,   149,   309,   312,   310,
   312,   312,   312,     8,   287,   287,     8,   311,    24,   287,
    82,     8,   314,   312,   312,   314,   107,    83,   312,   104,
   314,     5,     4,   151,     8,   329,   330,   103,     8,    84,
     8,     8,     8,   314,   333,   334,   366,   314,   338,   314,
   314,   314,   154,     8,     8,   154,   101,   366,     8,   340,
   154,   100,   314,   314,   342,   345,    39,   314,   349,   350,
   366,   366,   366,   154,    85,   142,   366,   154,   142,   154,
   154,   154,   154,   142,   366,    87,    88,   366,   366,   360,
    96,   362,   154,   154,    89,    91,   142,   154,   141,   213,
   142,   141,   142,   142,   142,   213,   141,   367,   373,   374,
    38,     1,   316,   nil,   nil,   142,   142,   nil,   nil,   141,
   142,   135,   nil,   141,   135,   141,   141,   141,   213,   135,
   213,   213,   213,   213,   213,   213,   213,   nil,   141,   141,
   nil,   nil,   135,   141,   134,    53,   135,   134,   135,   135,
   135,    53,   134,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   135,   135,   nil,   nil,   134,   135,   133,   nil,   134,
   133,   134,   134,   134,    53,   133,    53,    53,    53,    53,
    53,    53,    53,   nil,   134,   134,   nil,   nil,   133,   134,
    94,   364,   133,    94,   133,   133,   133,   364,    94,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   133,   133,   nil,
   nil,    94,   133,   132,   nil,    94,   132,    94,    94,    94,
   364,   132,   364,   364,   364,   364,   364,   364,   364,   nil,
    94,    94,   nil,   nil,   132,    94,   255,   116,   132,   255,
   132,   132,   132,   116,   255,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   132,   132,   nil,   nil,   255,   132,   320,
   nil,   255,   320,   255,   255,   255,   116,   320,   116,   116,
   116,   116,   116,   116,   116,   nil,   255,   255,   nil,   nil,
   320,   255,   130,     6,   320,   130,   320,   320,   320,     6,
   130,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   320,
   320,   nil,   nil,   130,   320,   129,   nil,   130,   129,   130,
   130,   130,     6,   129,     6,     6,     6,     6,     6,     6,
     6,   nil,   130,   130,   nil,   nil,   129,   130,   128,     7,
   129,   128,   129,   129,   129,     7,   128,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   129,   129,   nil,   nil,   128,
   129,   127,   nil,   128,   127,   128,   128,   128,     7,   127,
     7,     7,     7,     7,     7,     7,     7,   nil,   128,   128,
   nil,   nil,   127,   128,   126,   313,   127,   126,   127,   127,
   127,   313,   126,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   127,   127,   nil,   nil,   126,   127,   125,   nil,   126,
   125,   126,   126,   126,   313,   125,   313,   313,   313,   313,
   313,   313,   313,   nil,   126,   126,   nil,   nil,   125,   126,
   124,   nil,   125,   124,   125,   125,   125,   197,   124,   nil,
   197,   197,   197,   197,   197,   197,   nil,   125,   125,   nil,
   nil,   124,   125,    62,   nil,   124,    62,   124,   124,   124,
   196,    62,   nil,   196,   196,   196,   196,   196,   196,   nil,
   124,   124,   nil,   nil,    62,   124,    63,   nil,    62,    63,
    62,    62,    62,   201,    63,   nil,   201,   201,   201,   201,
   201,   201,   nil,    62,    62,   nil,   nil,    63,    62,    64,
   nil,    63,    64,    63,    63,    63,   198,    64,   nil,   198,
   198,   198,   198,   198,   198,   nil,    63,    63,   nil,   nil,
    64,    63,   123,   nil,    64,   123,    64,    64,    64,   200,
   123,   nil,   200,   200,   200,   200,   200,   200,   nil,    64,
    64,   nil,   nil,   123,    64,   122,   nil,   123,   122,   123,
   123,   123,   202,   122,   nil,   202,   202,   202,   202,   202,
   202,   nil,   123,   123,   nil,   nil,   122,   123,   121,   nil,
   122,   121,   122,   122,   122,   199,   121,   nil,   199,   199,
   199,   199,   199,   199,   nil,   122,   122,   nil,   nil,   121,
   122,   321,   nil,   121,   321,   121,   121,   121,   nil,   321,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   121,   121,
   nil,   nil,   321,   121,   120,   nil,   321,   120,   321,   321,
   321,   nil,   120,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   321,   321,   nil,   nil,   120,   321,   119,   nil,   120,
   119,   120,   120,   120,   nil,   119,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   120,   120,   nil,   nil,   119,   120,
   118,   nil,   119,   118,   119,   119,   119,   nil,   118,   nil,
   nil,   nil,   nil,    73,   nil,   nil,   nil,   119,   119,   nil,
   nil,   118,   119,   113,    73,   118,   113,   118,   118,   118,
   nil,   113,   nil,   nil,   nil,   nil,   nil,    73,   nil,    73,
   118,   118,   nil,    73,   113,   118,   nil,   nil,   113,   nil,
   113,   113,   113,   111,    73,    73,   111,   111,   nil,   nil,
   nil,   111,   380,   113,   113,   380,   nil,   nil,   113,   nil,
   380,   nil,   nil,   nil,   111,   nil,   nil,   nil,   111,   nil,
   111,   111,   111,   380,   nil,   nil,   nil,   380,   nil,   380,
   380,   380,   105,   111,   111,   105,   105,   nil,   111,   nil,
   105,   102,   380,   380,   102,   nil,   nil,   380,   nil,   102,
   nil,   nil,   nil,   105,   nil,   nil,   nil,   105,   nil,   105,
   105,   105,   102,   nil,   nil,   nil,   102,   nil,   102,   102,
   102,    99,   105,   105,    99,   nil,   nil,   105,   nil,    99,
    86,   102,   102,    86,   nil,   nil,   102,   nil,    86,   nil,
   nil,   nil,    99,   nil,   nil,   nil,    99,   nil,    99,    99,
    99,    86,   nil,   nil,   nil,    86,   nil,    86,    86,    86,
    98,    99,    99,    98,   nil,   nil,    99,   nil,    98,    97,
    86,    86,    97,   nil,   nil,    86,   nil,    97,   nil,   nil,
   nil,    98,   nil,   nil,   nil,    98,   nil,    98,    98,    98,
    97,   nil,   nil,   nil,    97,   nil,    97,    97,    97,    95,
    98,    98,    95,   nil,   nil,    98,   295,    95,   nil,    97,
    97,   nil,   nil,   nil,    97,   nil,   nil,   nil,   nil,   295,
    95,   295,   nil,   nil,    95,   295,    95,    95,    95,     0,
     0,     0,     0,     0,     0,     0,   295,   295,   nil,    95,
    95,   nil,   195,   nil,    95,   195,   195,   195,   195,   195,
   195,   195,   195,   195,   195,   195,   195,   195,     0,   nil,
   nil,     0,   nil,   nil,     0,   nil,     0,     0,   nil,     0,
   nil,   175,   nil,     0,   175,   175,   175,   175,   175,   175,
   175,   175,   175,   175,   175,   175,   175,   175,   175,   175,
   175,   152,   nil,   nil,   nil,   nil,   nil,   nil,   263,   nil,
   nil,   332,   nil,   nil,   152,   nil,   152,   nil,   nil,   175,
   152,   263,   nil,   263,   332,   nil,   332,   263,   nil,   nil,
   332,   152,   152,   331,   nil,   nil,    77,   nil,   263,   263,
   nil,   332,   332,     9,   nil,   nil,   331,   nil,   331,    77,
   nil,    77,   331,   nil,   nil,    77,     9,   272,     9,   nil,
   nil,   nil,     9,   331,   331,   264,    77,    77,   nil,   nil,
   272,   272,   272,     9,     9,   nil,   272,   nil,   264,   nil,
   264,   nil,   nil,   nil,   264,   nil,   nil,   272,   272,   nil,
   nil,   nil,   nil,   nil,   143,   264,   264,   143,   143,   143,
   143,   143,   143,   143,   143,   143,   143,   143,   143,   143,
   143,   143,   143,   143,   nil,   nil,   nil,   217,   nil,   143,
   217,   217,   217,   217,   217,   217,   217,   217,   217,   217,
   217,   217,   217,   217,   217,   217,   217,   nil,   nil,   nil,
   341,   nil,   217,   341,   341,   341,   341,   341,   341,   341,
   341,   341,   341,   341,   341,   341,   341,   341,   341,   341,
   nil,   nil,   nil,   256,   nil,   341,   256,   256,   256,   256,
   256,   256,   256,   256,   256,   256,   256,   256,   256,   256,
   256,   256,   256,   138,   nil,   256,   138,   138,   138,   138,
   138,   138,   138,   138,   138,   138,   138,   138,   138,   138,
   138,   138,   138,    56,   138,   nil,    56,    56,    56,    56,
    56,    56,    56,    56,    56,    56,    56,    56,    56,    56,
    56,    56,    56,   319,   nil,   nil,   319,   319,   319,   319,
   319,   319,   319,   319,   319,   319,   319,   319,   319,   319,
   319,   319,   319,   167,   nil,   nil,   167,   167,   167,   167,
   167,   167,   167,   167,   167,   167,   167,   167,   167,   167,
   167,   167,   167,   286,   286,   nil,   286,   286,   286,   286,
   286,   286,   286,   286,   286,   286,   286,   286,   286,   286,
   286,   286,   286,   181,   nil,   nil,   181,   181,   181,   181,
   181,   181,   181,   181,   181,   181,   181,   181,   181,   181,
   181,   181,   181,   227,   nil,   nil,   227,   227,   227,   227,
   227,   227,   227,   227,   227,   227,   227,   227,   227,   227,
   227,   227,   227,   192,   nil,   nil,   192,   192,   192,   192,
   192,   192,   192,   192,   192,   192,   192,   192,   192,   192,
   192,   192,   193,   nil,   nil,   193,   193,   193,   193,   193,
   193,   193,   193,   193,   193,   193,   193,   193,   193,   193,
   194,   nil,   nil,   194,   194,   194,   194,   194,   194,   194,
   194,   194,   194,   194,   194,   194,   194,     3,   nil,   nil,
     3,   nil,   nil,     3,   nil,     3,     3,    17,     3,   nil,
    17,   nil,     3,    17,   nil,    17,    17,   nil,    17,   nil,
   nil,   nil,    17 ]

racc_action_pointer = [
  1283,   541,   nil,  1692,   431,   397,   688,   734,   439,  1407,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,  1702,   306,   293,
   287,   284,   278,   210,   397,   nil,    19,   nil,   nil,   nil,
    -4,   163,   158,   nil,   nil,   nil,   146,   nil,   512,   445,
    88,   112,   118,    -1,   nil,   157,   227,    -4,   232,   264,
   297,   302,   326,   550,   nil,   nil,  1578,   nil,   nil,   nil,
   nil,   nil,   869,   892,   915,   302,   nil,   346,   348,   215,
   nil,   nil,   nil,  1088,   nil,   nil,   nil,  1400,   388,   391,
   nil,   397,   399,   391,   400,   473,  1216,   484,   485,   493,
   nil,   494,   268,   nil,   616,  1285,   489,  1255,  1246,  1207,
   448,   431,  1177,   436,   428,  1168,   nil,   401,   112,   nil,
   -45,  1129,   nil,  1099,   403,   372,   642,   nil,  1076,  1053,
  1030,   984,   961,   938,   846,   823,   800,   777,   754,   731,
   708,   279,   639,   593,   570,   547,    86,   280,  1558,   143,
   335,   524,   501,  1469,   324,   nil,   nil,   nil,     1,   389,
   nil,   433,  1365,   375,   478,   nil,   208,   nil,   207,   nil,
   221,   160,   177,   197,   178,   nil,   nil,  1618,   188,   132,
   140,    92,    44,   -16,   nil,  1356,   -24,   185,    14,    -2,
    61,  1658,    68,   nil,   nil,   nil,   nil,    88,   132,   nil,
   nil,   nil,  1698,  1717,  1735,  1327,   875,   852,   921,   990,
   944,   898,   967,    84,   180,   132,   236,   237,   240,   222,
    -4,   357,   nil,   504,   208,   257,   nil,  1492,   nil,   263,
   nil,   nil,   nil,   292,   258,   nil,   nil,  1678,   253,   nil,
   263,   nil,   276,   296,   289,   nil,   nil,   297,   298,   nil,
   nil,   nil,   nil,   nil,   nil,   327,   nil,   318,   305,   288,
     7,   288,   nil,   310,   nil,   662,  1538,   294,   nil,   nil,
   nil,   298,   310,  1372,  1429,   nil,   366,   298,   335,   313,
   304,   -27,  1421,   348,   349,   nil,   351,   nil,   353,   341,
   nil,   332,   324,   -29,   195,   390,  1638,   400,   nil,   -35,
   383,   nil,   nil,   nil,   364,  1280,   nil,   nil,   nil,   nil,
   nil,   392,   383,   nil,   397,   -19,   nil,   400,   nil,   407,
   384,   392,   409,   780,   448,   nil,   490,   nil,   nil,  1598,
   685,  1007,   nil,   nil,    93,   nil,   nil,   nil,   nil,   396,
   394,  1397,  1375,   402,   403,   nil,   nil,   nil,   426,    64,
   462,  1515,   442,   nil,   nil,   466,   nil,   nil,   -41,   469,
   446,   nil,   nil,   nil,   -20,   nil,   nil,    -9,   nil,   157,
   466,   152,   490,   nil,   596,   nil,   471,   507,   nil,   nil,
   nil,   nil,   nil,   508,   487,   -42,   nil,   nil,   nil,   nil,
  1138,   257,   nil ]

racc_action_default = [
  -137,  -194,    -1,  -194,  -194,  -124,  -126,  -194,  -194,   -37,
  -130,  -131,  -132,  -133,  -134,  -135,  -136,  -137,   -76,   -76,
   -76,   -76,   -76,   -76,   -76,  -193,  -194,    -2,    -3,    -9,
   -10,  -194,  -175,  -182,    -4,  -125,  -194,    -5,   -12,   -76,
   -76,  -194,  -194,   -76,   -95,  -194,   -15,  -194,  -194,  -194,
  -113,  -110,  -194,  -126,    -6,   -12,    -7,   -17,   -18,   -19,
   -20,   -21,  -194,  -194,  -194,  -194,   -63,   -65,  -194,  -194,
    -8,   -23,   -24,   -31,   -26,   -27,   -28,   -37,  -194,  -194,
  -138,  -194,   -76,  -140,  -147,  -194,  -194,  -194,  -194,  -194,
   383,  -194,   -37,  -172,  -194,  -194,  -194,  -194,  -194,  -194,
   -13,  -194,  -194,  -194,  -194,  -194,   -16,  -194,  -194,   -98,
  -194,  -194,  -109,  -194,  -113,  -194,  -126,  -128,  -194,  -194,
  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,  -194,
  -194,  -194,  -194,  -194,  -194,  -194,   -56,   -57,  -194,  -194,
  -173,   -71,  -194,  -194,   -37,   -73,   -74,   -25,   -31,   -31,
   -34,  -194,   -37,  -194,   -87,   -77,  -194,  -141,  -194,  -148,
   -37,  -194,  -194,   -37,   -37,   -11,  -171,  -176,  -194,  -194,
  -194,  -194,  -194,  -194,   -91,   -69,  -194,   -13,  -194,  -194,
  -194,  -115,  -194,  -116,   -97,   -99,  -100,  -194,  -194,  -114,
  -111,  -127,   -39,   -40,   -41,   -42,   -43,   -44,   -45,   -46,
   -47,   -48,   -49,   -50,   -51,   -52,   -53,   -54,   -55,   -19,
  -194,  -194,   -62,  -126,  -173,  -194,   -72,  -194,   -68,  -194,
   -32,   -33,   -29,  -194,   -35,   -38,   -22,   -83,  -194,   -84,
   -85,   -88,  -142,  -150,  -194,  -169,  -170,  -194,  -194,  -187,
  -188,  -189,   -89,   -90,   -14,  -194,   -92,   -71,  -194,  -119,
  -122,  -194,  -112,  -194,   -58,  -194,  -194,  -194,  -174,   -64,
   -66,  -194,  -183,   -37,   -37,   -75,  -194,  -144,  -142,  -194,
  -157,  -155,   -37,  -185,  -185,   -70,  -194,  -104,  -194,  -117,
  -120,  -194,  -194,  -122,  -126,  -194,  -194,  -194,  -129,   -81,
  -194,   -30,   -36,   -86,  -194,   -37,  -143,  -146,  -149,  -158,
  -151,  -194,  -153,  -156,  -194,  -162,  -166,  -194,  -186,  -194,
  -194,  -194,  -194,  -126,  -194,  -123,  -194,   -60,   -59,   -61,
  -194,  -194,   -79,   -80,   -81,  -184,  -139,  -145,  -152,  -147,
  -194,   -37,   -37,  -178,  -178,   -93,   -94,  -118,  -194,  -194,
  -106,  -194,  -194,   -82,  -154,  -194,  -163,  -164,  -124,  -194,
  -194,   -96,  -121,  -105,  -194,   -67,   -78,   -37,  -177,  -190,
  -194,  -190,  -185,  -192,  -126,  -108,   -10,  -194,  -160,  -161,
  -180,  -181,  -191,  -194,  -194,  -194,  -179,  -107,  -159,  -167,
  -194,  -194,  -168 ]

racc_goto_table = [
    56,   139,   233,   261,   148,   112,   150,   320,   101,    70,
   176,   307,   309,   106,   214,   110,   223,   303,   322,   231,
    37,   188,   213,    25,   306,   282,   215,    34,   267,   219,
   280,   182,   153,   281,   348,   350,   190,   187,   228,   108,
    80,   144,   343,   210,   165,   234,   220,   221,   237,   238,
   178,   107,   278,   322,   136,   137,   138,   156,   282,    50,
    50,   143,    52,   169,   296,    73,   315,   117,    54,   189,
   179,   294,   158,   353,   325,   344,   269,   151,   161,   148,
   148,   150,   150,   346,   347,   270,   167,   168,   214,   170,
   171,   172,   166,   337,   100,   298,   258,   181,   300,   100,
   373,   100,    28,   181,   304,   367,    50,   378,    27,    52,
   192,   193,   194,   195,   196,   197,   198,   199,   200,   201,
   202,   203,   204,   205,   206,   207,   208,   162,   292,   149,
   191,   293,   276,    73,   217,    93,     2,   154,   365,   358,
   244,   160,     1,   nil,   163,   164,   227,   nil,    73,   100,
   nil,   nil,   224,   275,   360,   nil,   177,   180,    83,    84,
    85,    86,    87,    88,    89,   370,   nil,   372,    50,    50,
   nil,   nil,    52,   nil,   nil,   nil,   nil,   nil,   nil,    98,
    99,   nil,   nil,   103,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   368,   nil,   256,   149,   149,   nil,   nil,    73,   nil,
   nil,   nil,   232,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   155,   nil,   nil,   nil,   100,   257,   nil,   342,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   181,   nil,   nil,   nil,   nil,   nil,   286,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   227,   nil,
   nil,   nil,   nil,   291,   224,   nil,    50,   nil,   nil,    52,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   319,
   nil,   nil,   nil,   nil,   nil,   nil,   363,   nil,   268,   nil,
   nil,   nil,   nil,   nil,   nil,   327,   371,   148,   316,   150,
   nil,   277,   nil,   nil,   181,   nil,   339,   nil,   nil,   nil,
   nil,   nil,   341,   nil,   nil,   nil,   nil,   nil,   nil,    73,
    73,   nil,   nil,   nil,   268,   nil,   nil,   338,    73,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,
    52,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    73,   nil,   nil,   328,   nil,   nil,   369,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    50,   nil,   nil,    52,
   nil,   nil,   381,   nil,   nil,   nil,   nil,   nil,   374,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    73,    73,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   366,   nil,   nil,   nil,    50,   nil,   nil,
    52,   nil,   149 ]

racc_goto_check = [
     8,    24,    63,    27,    18,    45,    19,    28,    13,     9,
    23,    76,    76,    13,    55,    13,    22,    69,    29,    35,
     6,    23,    50,    58,    73,    49,    25,     5,    60,    21,
    47,    40,    11,    41,    77,    77,    36,    40,    30,     8,
    58,    26,    28,    23,    11,    21,    20,    20,    21,    21,
    37,    14,    38,    29,     8,     8,     8,    59,    49,    12,
    12,     8,    10,    13,    60,    10,    41,     6,     7,    45,
    13,    61,    62,    43,    27,    69,    64,     9,     8,    18,
    18,    19,    19,    73,    73,    65,     8,     8,    55,     8,
     8,     8,     9,    47,    12,    66,    50,     8,    67,    12,
    76,    12,     4,     8,    70,    71,    12,    72,     3,    10,
     8,     8,     8,     8,     8,     8,     8,     8,     8,     8,
     8,     8,     8,     8,     8,     8,     8,    74,    22,    10,
     6,    35,    25,    10,     8,    75,     2,    10,    39,    78,
    13,    10,     1,   nil,    10,    10,     8,   nil,    10,    12,
   nil,   nil,     9,    23,    79,   nil,    12,    12,    31,    31,
    31,    31,    31,    31,    31,    79,   nil,    79,    12,    12,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,    31,
    31,   nil,   nil,    31,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    63,   nil,     8,    10,    10,   nil,   nil,    10,   nil,
   nil,   nil,    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,    31,   nil,   nil,   nil,    12,     6,   nil,    23,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,     8,   nil,   nil,   nil,   nil,   nil,     8,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,   nil,
   nil,   nil,   nil,     9,     9,   nil,    12,   nil,   nil,    10,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,     8,
   nil,   nil,   nil,   nil,   nil,   nil,    24,   nil,    10,   nil,
   nil,   nil,   nil,   nil,   nil,     9,    24,    18,     6,    19,
   nil,    12,   nil,   nil,     8,   nil,     8,   nil,   nil,   nil,
   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,   nil,    10,
    10,   nil,   nil,   nil,    10,   nil,   nil,     6,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,
    10,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,    10,   nil,   nil,    12,   nil,   nil,     9,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,    12,   nil,   nil,    10,
   nil,   nil,     8,   nil,   nil,   nil,   nil,   nil,     6,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,    10,    10,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,   nil,
   nil,   nil,   nil,    10,   nil,   nil,   nil,    12,   nil,   nil,
    10,   nil,    10 ]

racc_goto_pointer = [
   nil,   142,   136,   105,    98,    22,    14,    61,    -8,     0,
    56,   -47,    53,   -33,     5,   nil,   nil,   nil,   -69,   -67,
  -102,  -115,  -136,   -92,   -64,  -115,   -28,  -216,  -282,  -271,
  -116,   140,   nil,   nil,   nil,  -135,   -79,   -53,  -197,  -216,
   -74,  -217,   nil,  -267,   nil,   -45,   nil,  -219,   nil,  -225,
  -118,   nil,   nil,   nil,   nil,  -126,   nil,   nil,    23,   -26,
  -204,  -196,   -12,  -156,  -157,  -148,  -175,  -173,   nil,  -254,
  -168,  -252,  -268,  -248,    40,   103,  -262,  -299,  -209,  -194 ]

racc_goto_default = [
   nil,   nil,   nil,    17,   262,   361,   nil,    53,   175,   305,
    30,    31,    67,   nil,   nil,    66,    57,   229,    71,    72,
   147,    78,   nil,   216,   nil,   nil,   nil,   308,   nil,    82,
   nil,   nil,   323,   324,   230,   nil,    42,   nil,   nil,    44,
   279,   nil,   nil,   nil,    51,   nil,   114,   nil,   283,    36,
   nil,    10,    11,    12,    13,    14,    15,    16,   nil,   nil,
   nil,   nil,   301,    32,   nil,   nil,   nil,   nil,   302,   nil,
   nil,   nil,   nil,   nil,    33,   nil,   nil,   nil,   nil,   nil ]

racc_reduce_table = [
  0, 0, :racc_error,
  1, 82, :_reduce_none,
  2, 82, :_reduce_2,
  2, 82, :_reduce_3,
  2, 82, :_reduce_4,
  2, 82, :_reduce_5,
  2, 82, :_reduce_6,
  2, 82, :_reduce_7,
  2, 82, :_reduce_8,
  1, 91, :_reduce_9,
  1, 92, :_reduce_10,
  3, 92, :_reduce_11,
  1, 93, :_reduce_12,
  1, 94, :_reduce_13,
  3, 94, :_reduce_14,
  0, 95, :_reduce_15,
  1, 95, :_reduce_none,
  1, 96, :_reduce_17,
  1, 96, :_reduce_18,
  1, 96, :_reduce_19,
  1, 97, :_reduce_20,
  1, 97, :_reduce_21,
  1, 98, :_reduce_none,
  1, 90, :_reduce_none,
  1, 90, :_reduce_none,
  2, 90, :_reduce_25,
  1, 99, :_reduce_26,
  1, 99, :_reduce_27,
  1, 99, :_reduce_28,
  3, 99, :_reduce_29,
  5, 100, :_reduce_30,
  0, 101, :_reduce_31,
  2, 101, :_reduce_32,
  2, 101, :_reduce_33,
  1, 101, :_reduce_34,
  1, 103, :_reduce_35,
  3, 103, :_reduce_36,
  0, 102, :_reduce_37,
  3, 102, :_reduce_38,
  3, 89, :_reduce_39,
  3, 89, :_reduce_40,
  3, 89, :_reduce_41,
  3, 89, :_reduce_42,
  3, 89, :_reduce_43,
  3, 89, :_reduce_44,
  3, 89, :_reduce_45,
  3, 89, :_reduce_46,
  3, 89, :_reduce_47,
  3, 89, :_reduce_48,
  3, 89, :_reduce_49,
  3, 89, :_reduce_50,
  3, 89, :_reduce_51,
  3, 89, :_reduce_52,
  3, 89, :_reduce_53,
  3, 89, :_reduce_54,
  3, 89, :_reduce_55,
  2, 89, :_reduce_56,
  2, 89, :_reduce_57,
  4, 89, :_reduce_58,
  6, 89, :_reduce_59,
  6, 89, :_reduce_60,
  6, 89, :_reduce_61,
  3, 89, :_reduce_62,
  1, 89, :_reduce_none,
  4, 89, :_reduce_64,
  1, 89, :_reduce_65,
  4, 89, :_reduce_66,
  8, 89, :_reduce_67,
  3, 89, :_reduce_68,
  1, 104, :_reduce_69,
  3, 104, :_reduce_70,
  0, 106, :_reduce_71,
  1, 106, :_reduce_none,
  1, 107, :_reduce_73,
  1, 107, :_reduce_74,
  4, 110, :_reduce_75,
  0, 112, :_reduce_76,
  2, 112, :_reduce_77,
  3, 113, :_reduce_78,
  1, 114, :_reduce_none,
  1, 114, :_reduce_none,
  0, 109, :_reduce_81,
  2, 109, :_reduce_82,
  1, 115, :_reduce_none,
  1, 115, :_reduce_none,
  1, 116, :_reduce_85,
  3, 116, :_reduce_86,
  0, 111, :_reduce_87,
  1, 111, :_reduce_none,
  4, 88, :_reduce_89,
  4, 88, :_reduce_90,
  3, 88, :_reduce_91,
  4, 88, :_reduce_92,
  7, 88, :_reduce_93,
  7, 88, :_reduce_94,
  1, 88, :_reduce_none,
  8, 88, :_reduce_96,
  3, 88, :_reduce_97,
  2, 88, :_reduce_98,
  3, 88, :_reduce_99,
  3, 88, :_reduce_100,
  1, 123, :_reduce_101,
  2, 123, :_reduce_102,
  1, 118, :_reduce_103,
  3, 118, :_reduce_104,
  8, 120, :_reduce_105,
  0, 124, :_reduce_106,
  4, 124, :_reduce_107,
  2, 124, :_reduce_108,
  2, 125, :_reduce_109,
  1, 117, :_reduce_110,
  3, 117, :_reduce_111,
  3, 127, :_reduce_112,
  0, 126, :_reduce_113,
  2, 126, :_reduce_114,
  1, 121, :_reduce_none,
  1, 121, :_reduce_116,
  1, 128, :_reduce_117,
  3, 128, :_reduce_118,
  0, 119, :_reduce_119,
  1, 119, :_reduce_none,
  4, 129, :_reduce_121,
  0, 122, :_reduce_122,
  2, 122, :_reduce_123,
  0, 130, :_reduce_124,
  1, 130, :_reduce_125,
  0, 87, :_reduce_126,
  3, 87, :_reduce_127,
  2, 87, :_reduce_128,
  4, 105, :_reduce_129,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  1, 84, :_reduce_none,
  0, 139, :_reduce_137,
  2, 139, :_reduce_138,
  7, 132, :_reduce_139,
  0, 140, :_reduce_140,
  1, 140, :_reduce_141,
  0, 141, :_reduce_142,
  2, 141, :_reduce_143,
  0, 142, :_reduce_144,
  2, 142, :_reduce_145,
  6, 133, :_reduce_146,
  0, 143, :_reduce_147,
  1, 143, :_reduce_148,
  2, 145, :_reduce_149,
  0, 146, :_reduce_150,
  2, 146, :_reduce_151,
  2, 149, :_reduce_152,
  1, 150, :_reduce_153,
  3, 150, :_reduce_154,
  0, 148, :_reduce_155,
  1, 148, :_reduce_none,
  0, 147, :_reduce_157,
  1, 147, :_reduce_158,
  12, 134, :_reduce_159,
  1, 152, :_reduce_160,
  1, 152, :_reduce_161,
  1, 154, :_reduce_162,
  3, 154, :_reduce_163,
  3, 154, :_reduce_164,
  0, 151, :_reduce_165,
  1, 151, :_reduce_166,
  1, 153, :_reduce_167,
  3, 153, :_reduce_168,
  4, 135, :_reduce_169,
  4, 136, :_reduce_170,
  3, 144, :_reduce_171,
  2, 155, :_reduce_172,
  0, 131, :_reduce_173,
  2, 131, :_reduce_174,
  0, 156, :_reduce_175,
  2, 156, :_reduce_176,
  9, 137, :_reduce_177,
  0, 158, :_reduce_178,
  4, 158, :_reduce_179,
  2, 159, :_reduce_180,
  2, 159, :_reduce_181,
  1, 85, :_reduce_182,
  1, 108, :_reduce_183,
  3, 108, :_reduce_184,
  0, 157, :_reduce_185,
  1, 157, :_reduce_none,
  4, 86, :_reduce_187,
  4, 86, :_reduce_188,
  4, 86, :_reduce_189,
  0, 160, :_reduce_190,
  2, 160, :_reduce_191,
  9, 138, :_reduce_192,
  1, 83, :_reduce_193 ]

racc_reduce_n = 194

racc_shift_n = 383

racc_token_table = {
  false => 0,
  :error => 1,
  "forall" => 2,
  "exists" => 3,
  "old" => 4,
  "[" => 5,
  "]" => 6,
  "!" => 7,
  "*" => 8,
  "/" => 9,
  "%" => 10,
  "+" => 11,
  "-" => 12,
  "++" => 13,
  "==" => 14,
  "!=" => 15,
  "<" => 16,
  ">" => 17,
  "<=" => 18,
  ">=" => 19,
  "<:" => 20,
  "&&" => 21,
  "||" => 22,
  "==>" => 23,
  "<==>" => 24,
  "if" => 25,
  "then" => 26,
  "else" => 27,
  ":" => 28,
  "(" => 29,
  ")" => 30,
  :IDENTIFIER => 31,
  :NUMBER => 32,
  :BITVECTOR => 33,
  :STRING => 34,
  :BVTYPE => 35,
  :PARSE_DECL => 36,
  :PARSE_PARAM => 37,
  :PARSE_SPEC => 38,
  :PARSE_BLOCKS => 39,
  :PARSE_STMT => 40,
  :PARSE_EXPR => 41,
  :PARSE_TYPE => 42,
  "," => 43,
  "true" => 44,
  "false" => 45,
  "bool" => 46,
  "int" => 47,
  ":=" => 48,
  "|" => 49,
  "::" => 50,
  "{:" => 51,
  "}" => 52,
  "{" => 53,
  "assert" => 54,
  ";" => 55,
  "assume" => 56,
  "havoc" => 57,
  "call" => 58,
  "while" => 59,
  "break" => 60,
  "return" => 61,
  "goto" => 62,
  "invariant" => 63,
  "free" => 64,
  "type" => 65,
  "finite" => 66,
  "=" => 67,
  "const" => 68,
  "unique" => 69,
  "complete" => 70,
  "function" => 71,
  "returns" => 72,
  "axiom" => 73,
  "var" => 74,
  "where" => 75,
  "procedure" => 76,
  "requires" => 77,
  "modifies" => 78,
  "ensures" => 79,
  "implementation" => 80 }

racc_nt_base = 81

racc_use_result_var = false

Racc_arg = [
  racc_action_table,
  racc_action_check,
  racc_action_default,
  racc_action_pointer,
  racc_goto_table,
  racc_goto_check,
  racc_goto_default,
  racc_goto_pointer,
  racc_nt_base,
  racc_reduce_table,
  racc_token_table,
  racc_shift_n,
  racc_reduce_n,
  racc_use_result_var ]

Racc_token_to_s_table = [
  "$end",
  "error",
  "\"forall\"",
  "\"exists\"",
  "\"old\"",
  "\"[\"",
  "\"]\"",
  "\"!\"",
  "\"*\"",
  "\"/\"",
  "\"%\"",
  "\"+\"",
  "\"-\"",
  "\"++\"",
  "\"==\"",
  "\"!=\"",
  "\"<\"",
  "\">\"",
  "\"<=\"",
  "\">=\"",
  "\"<:\"",
  "\"&&\"",
  "\"||\"",
  "\"==>\"",
  "\"<==>\"",
  "\"if\"",
  "\"then\"",
  "\"else\"",
  "\":\"",
  "\"(\"",
  "\")\"",
  "IDENTIFIER",
  "NUMBER",
  "BITVECTOR",
  "STRING",
  "BVTYPE",
  "PARSE_DECL",
  "PARSE_PARAM",
  "PARSE_SPEC",
  "PARSE_BLOCKS",
  "PARSE_STMT",
  "PARSE_EXPR",
  "PARSE_TYPE",
  "\",\"",
  "\"true\"",
  "\"false\"",
  "\"bool\"",
  "\"int\"",
  "\":=\"",
  "\"|\"",
  "\"::\"",
  "\"{:\"",
  "\"}\"",
  "\"{\"",
  "\"assert\"",
  "\";\"",
  "\"assume\"",
  "\"havoc\"",
  "\"call\"",
  "\"while\"",
  "\"break\"",
  "\"return\"",
  "\"goto\"",
  "\"invariant\"",
  "\"free\"",
  "\"type\"",
  "\"finite\"",
  "\"=\"",
  "\"const\"",
  "\"unique\"",
  "\"complete\"",
  "\"function\"",
  "\"returns\"",
  "\"axiom\"",
  "\"var\"",
  "\"where\"",
  "\"procedure\"",
  "\"requires\"",
  "\"modifies\"",
  "\"ensures\"",
  "\"implementation\"",
  "$start",
  "target",
  "program",
  "decl",
  "param_decl",
  "spec",
  "blocks",
  "stmt",
  "expr",
  "type",
  "name",
  "names",
  "ident",
  "idents",
  "idents_opt",
  "literal",
  "bool_lit",
  "string",
  "type_atom",
  "map_type",
  "tc_args",
  "type_args",
  "types",
  "exprs",
  "body",
  "exprs_opt",
  "quantifier",
  "param_decls",
  "ants",
  "attr",
  "enss_opt",
  "attrs",
  "trigger",
  "ant",
  "ens",
  "enss",
  "lhss",
  "call_lhs",
  "wc_exprs_opt",
  "if_stmt",
  "wc_expr",
  "loop_invs",
  "stmts",
  "else_stmt",
  "lhs",
  "selects",
  "select",
  "wc_exprs",
  "loop_inv",
  "free_opt",
  "var_decls",
  "type_decl",
  "const_decl",
  "func_decl",
  "axiom_decl",
  "var_decl",
  "proc_decl",
  "impl_decl",
  "decls",
  "finite_opt",
  "tc_params",
  "type_syn",
  "unique_opt",
  "typed_ids",
  "order_spec",
  "parent_info",
  "complete_opt",
  "parent_edges_opt",
  "parent_edge",
  "parent_edges",
  "fargs_opt",
  "farg",
  "fbody",
  "fargs",
  "typed_ids_where",
  "where_clause",
  "param_decls_opt",
  "out_params",
  "pspec",
  "specs" ]

Racc_debug_parser = false

##### State transition tables end #####

# reduce 0 omitted

# reduce 1 omitted

module_eval(<<'.,.,', 'parser.racc', 28)
  def _reduce_2(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 29)
  def _reduce_3(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 30)
  def _reduce_4(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 31)
  def _reduce_5(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 32)
  def _reduce_6(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 33)
  def _reduce_7(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 34)
  def _reduce_8(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 36)
  def _reduce_9(val, _values)
     val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_10(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 37)
  def _reduce_11(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 39)
  def _reduce_12(val, _values)
     {name: val[0]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_13(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 40)
  def _reduce_14(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 41)
  def _reduce_15(val, _values)
     [] 
  end
.,.,

# reduce 16 omitted

module_eval(<<'.,.,', 'parser.racc', 44)
  def _reduce_17(val, _values)
     BooleanLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 45)
  def _reduce_18(val, _values)
     BitvectorLiteral.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 46)
  def _reduce_19(val, _values)
     IntegerLiteral.new value: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_20(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 47)
  def _reduce_21(val, _values)
     false 
  end
.,.,

# reduce 22 omitted

# reduce 23 omitted

# reduce 24 omitted

module_eval(<<'.,.,', 'parser.racc', 54)
  def _reduce_25(val, _values)
     CustomType.new name: val[0], arguments: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 57)
  def _reduce_26(val, _values)
     Type::Boolean 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 58)
  def _reduce_27(val, _values)
     Type::Integer 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 59)
  def _reduce_28(val, _values)
     BitvectorType.new width: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 60)
  def _reduce_29(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 63)
  def _reduce_30(val, _values)
        MapType.new arguments: val[0], domain: val[2], range: val[4]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 67)
  def _reduce_31(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 68)
  def _reduce_32(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 69)
  def _reduce_33(val, _values)
     [(CustomType.new name: val[0], arguments: val[1])] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 70)
  def _reduce_34(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_35(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 72)
  def _reduce_36(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_37(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 74)
  def _reduce_38(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 76)
  def _reduce_39(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 77)
  def _reduce_40(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 78)
  def _reduce_41(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 79)
  def _reduce_42(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 80)
  def _reduce_43(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 81)
  def _reduce_44(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 82)
  def _reduce_45(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 83)
  def _reduce_46(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 84)
  def _reduce_47(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 85)
  def _reduce_48(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 86)
  def _reduce_49(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 87)
  def _reduce_50(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 88)
  def _reduce_51(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 89)
  def _reduce_52(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 90)
  def _reduce_53(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 91)
  def _reduce_54(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 92)
  def _reduce_55(val, _values)
     BinaryExpression.new lhs: val[0], op: val[1], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 93)
  def _reduce_56(val, _values)
     LogicalNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 94)
  def _reduce_57(val, _values)
     ArithmeticNegation.new expression: val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 95)
  def _reduce_58(val, _values)
     MapSelect.new map: val[0], indexes: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 96)
  def _reduce_59(val, _values)
     MapUpdate.new map: val[0], indexes: val[2], value: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 97)
  def _reduce_60(val, _values)
     BitvectorExtract.new bitvector: val[0], msb: val[2], lsb: val[4] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 99)
  def _reduce_61(val, _values)
            IfExpression.new condition: val[1], then: val[3], else: val[5]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 101)
  def _reduce_62(val, _values)
     CodeExpression.new body: val[1] 
  end
.,.,

# reduce 63 omitted

module_eval(<<'.,.,', 'parser.racc', 104)
  def _reduce_64(val, _values)
            id = FunctionIdentifier.new val[0]
        FunctionApplication.new function: id, arguments: val[2]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 107)
  def _reduce_65(val, _values)
     StorageIdentifier.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 108)
  def _reduce_66(val, _values)
     OldExpression.new expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 110)
  def _reduce_67(val, _values)
            QuantifiedExpression.new quantifier: val[1], type_arguments: val[2],
          variables: val[3],
          attributes: val[5].select{|a| a.is_a?(Hash)},
          triggers: val[5].select{|es| es.is_a?(Array)}.map{|es| Trigger.new(expressions: es)},
          expression: val[6]
      
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 116)
  def _reduce_68(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_69(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 118)
  def _reduce_70(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 119)
  def _reduce_71(val, _values)
     [] 
  end
.,.,

# reduce 72 omitted

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_73(val, _values)
    'forall'
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 121)
  def _reduce_74(val, _values)
    'exists'
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 123)
  def _reduce_75(val, _values)
     {val[1].to_sym => val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_76(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 124)
  def _reduce_77(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 125)
  def _reduce_78(val, _values)
     val[1] 
  end
.,.,

# reduce 79 omitted

# reduce 80 omitted

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_81(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 127)
  def _reduce_82(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 83 omitted

# reduce 84 omitted

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_85(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 130)
  def _reduce_86(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 131)
  def _reduce_87(val, _values)
     [] 
  end
.,.,

# reduce 88 omitted

module_eval(<<'.,.,', 'parser.racc', 134)
  def _reduce_89(val, _values)
     AssertStatement.new attributes: val[1], expression: val[2], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 135)
  def _reduce_90(val, _values)
     AssumeStatement.new attributes: val[1], expression: val[2], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 137)
  def _reduce_91(val, _values)
          ids = val[1].map{|id| StorageIdentifier.new id}
      HavocStatement.new identifiers: ids, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 140)
  def _reduce_92(val, _values)
     AssignStatement.new lhs: val[0], rhs: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 142)
  def _reduce_93(val, _values)
          CallStatement.new attributes: val[1], assignments: val[2][:rets],
      procedure: val[2][:name], arguments: val[4], token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 146)
  def _reduce_94(val, _values)
          id = ProcedureIdentifier.new val[2]
      CallStatement.new assignments: nil, procedure: id, arguments: val[4],
      token: val[0]
    
  end
.,.,

# reduce 95 omitted

module_eval(<<'.,.,', 'parser.racc', 152)
  def _reduce_96(val, _values)
          WhileStatement.new condition: val[2], invariants: val[4], blocks: val[6],
      token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 156)
  def _reduce_97(val, _values)
          ids = val[1].map{|id| LabelIdentifier.new id}
      BreakStatement.new identifiers: ids, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 159)
  def _reduce_98(val, _values)
     ReturnStatement.new token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 160)
  def _reduce_99(val, _values)
     ReturnStatement.new expression: val[1], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 162)
  def _reduce_100(val, _values)
          ids = val[1].map{|id| LabelIdentifier.new id}
      GotoStatement.new identifiers: ids, token: val[0]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 166)
  def _reduce_101(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 167)
  def _reduce_102(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 170)
  def _reduce_103(val, _values)
     {name: ProcedureIdentifier.new(val[0]), rets: []} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 172)
  def _reduce_104(val, _values)
          ids = val[0].map{|id| StorageIdentifier.new id}
      id = ProcedureIdentifier.new val[2]
      {name: id, rets: ids}
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 177)
  def _reduce_105(val, _values)
     IfStatement.new condition: val[2], blocks: val[5], else: val[7], token: val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_106(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_107(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 178)
  def _reduce_108(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 181)
  def _reduce_109(val, _values)
        id = StorageIdentifier.new val[0]
    val[1].reduce(id){|m,x| MapSelect.new map: m, indexes: x}
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_110(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 184)
  def _reduce_111(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 186)
  def _reduce_112(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_113(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 187)
  def _reduce_114(val, _values)
     [val[0]] + val[1] 
  end
.,.,

# reduce 115 omitted

module_eval(<<'.,.,', 'parser.racc', 189)
  def _reduce_116(val, _values)
     Expression::Wildcard 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_117(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 190)
  def _reduce_118(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 191)
  def _reduce_119(val, _values)
     [] 
  end
.,.,

# reduce 120 omitted

module_eval(<<'.,.,', 'parser.racc', 193)
  def _reduce_121(val, _values)
     LoopInvariant.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_122(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 194)
  def _reduce_123(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_124(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 195)
  def _reduce_125(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 198)
  def _reduce_126(val, _values)
     [Block.new(names: [], statements: [])] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 200)
  def _reduce_127(val, _values)
          bs = val[2]
      bs.first.prepend_children(:names,val[0])
      bs
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 205)
  def _reduce_128(val, _values)
          bs = val[1]
      bs.unshift(Block.new(names: [], statements: [])) unless bs.first.names.empty?
      bs.first.prepend_children(:statements,val[0])
      bs
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 211)
  def _reduce_129(val, _values)
     Body.new locals: val[1], blocks: val[2] 
  end
.,.,

# reduce 130 omitted

# reduce 131 omitted

# reduce 132 omitted

# reduce 133 omitted

# reduce 134 omitted

# reduce 135 omitted

# reduce 136 omitted

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_137(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 221)
  def _reduce_138(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 224)
  def _reduce_139(val, _values)
        if val[5] && val[2]
      abort "Illegal declaration of type #{([val[3]] + val[4]) * " "}"
    end
    TypeDeclaration.new attributes: val[1], finite: val[2], name: val[3],
      arguments: val[4], type: val[5]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_140(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 230)
  def _reduce_141(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_142(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 231)
  def _reduce_143(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_144(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 232)
  def _reduce_145(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 235)
  def _reduce_146(val, _values)
        ConstantDeclaration.new(val[3].merge({attributes: val[1], unique: val[2], order_spec: val[4]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_147(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 237)
  def _reduce_148(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 238)
  def _reduce_149(val, _values)
     [val[0],val[1]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_150(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 239)
  def _reduce_151(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 241)
  def _reduce_152(val, _values)
        id = StorageIdentifier.new val[1]
    [val[0],id]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_153(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 244)
  def _reduce_154(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 245)
  def _reduce_155(val, _values)
     [] 
  end
.,.,

# reduce 156 omitted

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_157(val, _values)
     false 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 246)
  def _reduce_158(val, _values)
     true 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 249)
  def _reduce_159(val, _values)
        FunctionDeclaration.new attributes: val[1], name: val[2],
      type_arguments: val[3], arguments: val[5], return: val[9], body: val[11]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 254)
  def _reduce_160(val, _values)
     StorageDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 255)
  def _reduce_161(val, _values)
     StorageDeclaration.new(names: [], type: val[0]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 258)
  def _reduce_162(val, _values)
     [{names: [], type: val[0]}] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 260)
  def _reduce_163(val, _values)
          if val[2].first[:names].empty?
        [{names: [], type: val[0]}] + val[2]
      else
        val[2].first[:names].unshift(val[0])
        val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 268)
  def _reduce_164(val, _values)
          # assert val[2].first[:names].empty?

      unless val[0].respond_to?(:name)
        raise ParseError, "parse error on value #{val[0]}: expecting name."
      end

      if val[2].first[:names].empty?
        val[2].first[:names].unshift(val[0])
        val[2]
      else
        [{names: [val[0]], type: val[2].first[:names].shift}] + val[2]
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 282)
  def _reduce_165(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 284)
  def _reduce_166(val, _values)
          val[0].map do |x|
        x[:names].map!{|t| t.name}
        StorageDeclaration.new(x)
      end
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_167(val, _values)
     nil 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 289)
  def _reduce_168(val, _values)
     val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 292)
  def _reduce_169(val, _values)
        AxiomDeclaration.new attributes: val[1], expression: val[2]
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 296)
  def _reduce_170(val, _values)
        VariableDeclaration.new(val[2].merge({attributes: val[1]}))
  
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 298)
  def _reduce_171(val, _values)
     {names: val[0], type: val[2]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 299)
  def _reduce_172(val, _values)
     val[0].merge(val[1]) 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_173(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 300)
  def _reduce_174(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_175(val, _values)
     {} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 301)
  def _reduce_176(val, _values)
     {where: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 305)
  def _reduce_177(val, _values)
          ProcedureDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        specifications: val[8][:specs], body: val[8][:body]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_178(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 309)
  def _reduce_179(val, _values)
     val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_180(val, _values)
     {specs: val[1], body: nil} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 310)
  def _reduce_181(val, _values)
     {specs: val[0], body: val[1]} 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 312)
  def _reduce_182(val, _values)
     StorageDeclaration.new val[0] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_183(val, _values)
     [val[0]] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 313)
  def _reduce_184(val, _values)
     [val[0]] + val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 314)
  def _reduce_185(val, _values)
     [] 
  end
.,.,

# reduce 186 omitted

module_eval(<<'.,.,', 'parser.racc', 317)
  def _reduce_187(val, _values)
     RequiresClause.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 319)
  def _reduce_188(val, _values)
          ids = val[2].map{|id| StorageIdentifier.new id}
      ModifiesClause.new free: val[0], identifiers: ids
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 322)
  def _reduce_189(val, _values)
     EnsuresClause.new free: val[0], expression: val[2] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_190(val, _values)
     [] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 323)
  def _reduce_191(val, _values)
     [val[0]] + val[1] 
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 327)
  def _reduce_192(val, _values)
          ImplementationDeclaration.new attributes: val[1], name: val[2],
        type_arguments: val[3], parameters: val[5], returns: val[7],
        specifications: [], body: val[8]
    
  end
.,.,

module_eval(<<'.,.,', 'parser.racc', 332)
  def _reduce_193(val, _values)
     Program.new declarations: val[0] 
  end
.,.,

def _reduce_none(val, _values)
  val[0]
end

end   # class BoogieLanguage


