class Z3Model
  
  options no_result_var

  token VARIABLE CONSTANT VALUE TYPE NUMBER BOOLEAN LABEL FORMAL MAP2 MAP3 WEIRD
  
rule 
  target: model

  model:
    { Model.new }
    | definition model { m = val[1]; m << val[0]; m }
    
  definition:
    VARIABLE '->' rhs { Variable.new val[0].merge(value: val[2]) }
    | constant '->' rhs { 
      case val[2]
      when Hash
        Function.new val[0].merge(values: val[2])
      else
        Constant.new val[0].merge(value: val[2])
      end
    }
    | FORMAL '->' rhs { Formal.new val[0].merge(value: val[2]) }
    | LABEL '->' rhs { Label.new val[0].merge(value: val[2]) }
    | WEIRD '->' rhs { }
  
  constant: CONSTANT | MAP2 | MAP3
  rhs: value | '{' fmappings '}' { val[1] }
  
  fmappings:
    'else' '->' value { {nil => val[2]} }
    | values '->' value fmappings { val[3].merge({val[0] => val[2]}) }
    
  values: value { val[0] } | value values { vs = val[1]; [val[0]] + (vs.is_a?(Array) ? vs : [vs]) }

  value: VALUE { Value.new val[0] } | TYPE { Type.new val[0] } | literal | WEIRD
  literal: '(' '-' NUMBER ')' { -val[2] } | NUMBER | BOOLEAN
  end

---- header
require_relative 'lexer.rex'
require_relative 'values'
include Z3

---- inner
def parse(input)
  model = scan_str(input)
  model.resolve!
  model
end

---- footer
