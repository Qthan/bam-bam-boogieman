#--
# DO NOT MODIFY!!!!
# This file is automatically generated by rex 1.0.2
# from lexical definition file "lib/z3/model_parser.rex".
#++

require 'racc/parser'
module Z3
class ModelParser < Racc::Parser
  require 'strscan'

  class ScanError < StandardError ; end

  attr_reader :lineno
  attr_reader :filename

  def scan_setup ; end

  def action &block
    yield
  end

  def scan_str( str )
    scan_evaluate  str
    do_parse
  end

  def load_file( filename )
    @filename = filename
    open(filename, "r") do |f|
      scan_evaluate  f.read
    end
  end

  def scan_file( filename )
    load_file  filename
    do_parse
  end

  def next_token
    @rex_tokens.shift
  end

  def scan_evaluate( str )
    scan_setup
    @rex_tokens = []
    @lineno  =  1
    ss = StringScanner.new(str)
    state = nil
    until ss.eos?
      text = ss.peek(1)
      @lineno  +=  1  if text == "\n"
      case state
      when nil
        case
        when (text = ss.scan(/\*\*\*.*(?=\n)/))
          ;

        when (text = ss.scan(/\s+/))
          ;

        when (text = ss.scan(/unique-value!\d+/))
           @rex_tokens.push action { [:WEIRD, nil] }

        when (text = ss.scan(/distinct-elems!\d+!val!\d+/))
           @rex_tokens.push action { [:WEIRD, nil] }

        when (text = ss.scan(/distinct-aux-f!!\d+/))
           @rex_tokens.push action { [:WEIRD, nil] }

        when (text = ss.scan(/[a-zA-Z_.$\#'`~^\\?][\w.$\#'`~^\\?]*@@\d+!\d+!\d+/))
           @rex_tokens.push action { [:WEIRD, nil] }

        when (text = ss.scan(/[a-zA-Z_.$\#'`~^\\?][\w.$\#'`~^\\?]*'!\d+!\d+/))
           @rex_tokens.push action { [:WEIRD, nil] }

        when (text = ss.scan(/->|-|\(|\)/))
           @rex_tokens.push action { [text, text] }

        when (text = ss.scan(/\d+/))
           @rex_tokens.push action { [:NUMBER, text.to_i] }

        when (text = ss.scan(/true|false/))
           @rex_tokens.push action { [:BOOLEAN, eval(text) ]}

        when (text = ss.scan(/\belse\b/))
           @rex_tokens.push action { [text, text] }

        when (text = ss.scan(/\%lbl\%(@|\+)\d+/))
           @rex_tokens.push action { [:LABEL, {id: text[/(\d+)/,1]} ] }

        when (text = ss.scan(/call\d+formal@[a-zA-Z_.$\#'`~^\\?][\w.$\#'`~^\\?]*@\d+/))
           @rex_tokens.push action { [:FORMAL, {call_id: text[/call(\d+)/,1], parameter_name: text[/@(.*)@/,1], sequence_number: text[/@(\d+)/,1].to_i}] }

        when (text = ss.scan(/T@U!val!\d+/))
           @rex_tokens.push action { [:VALUE, {id: text[/(\d+)/,1].to_i}] }

        when (text = ss.scan(/T@T!val!\d+/))
           @rex_tokens.push action { [:TYPE, {id: text[/(\d+)/,1].to_i}] }

        when (text = ss.scan(/[a-zA-Z_.$\#'`~^\\?][\w.$\#'`~^\\?]*@\d+/))
           @rex_tokens.push action { [:VARIABLE, {name: text[/(.*)@/,1], sequence_number: text[/@(\d+)/,1].to_i}] }

        when (text = ss.scan(/[a-zA-Z_.$\#'`~^\\?][\w.$\#'`~^\\?]*@[a-zA-Z_.$\#'`~^\\?][\w.$\#'`~^\\?]*/))
           @rex_tokens.push action { [:WEIRD, nil] }

        when (text = ss.scan(/[a-zA-Z_.$\#'`~^\\?][\w.$\#'`~^\\?]*(@@\d+)?/))
           @rex_tokens.push action { [:CONSTANT, {name: text}] }

        when (text = ss.scan(/\[2\]/))
           @rex_tokens.push action { [:MAP2, {name: 'Map/2'}] }

        when (text = ss.scan(/\[3:=\]/))
           @rex_tokens.push action { [:MAP3, {name: 'Map/3'}] }

        when (text = ss.scan(/[a-zA-Z_.$\#'`~^\\?][\w.$\#'`~^\\?]*/))
           @rex_tokens.push action { [:IDENTIFIER, text.to_sym] }

        when (text = ss.scan(/./))
           @rex_tokens.push action { [text, text] }

        else
          text = ss.string[ss.pos .. -1]
          raise  ScanError, "can not match: '" + text + "'"
        end  # if

      else
        raise  ScanError, "undefined state: '" + state.to_s + "'"
      end  # case state
    end  # until ss
  end  # def scan_evaluate

end # class
end
